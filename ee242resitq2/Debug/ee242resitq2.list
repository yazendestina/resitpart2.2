
ee242resitq2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008330  08008330  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008338  08008338  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001cc4  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e24  20001e24  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8af  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b5b  00000000  00000000  0002ea3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  000315a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa8  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238ea  00000000  00000000  00032c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9f4  00000000  00000000  00056532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5541  00000000  00000000  00065f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b467  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003748  00000000  00000000  0012b4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800821c 	.word	0x0800821c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800821c 	.word	0x0800821c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fad1 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f8b7 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f91d 	bl	80007d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000596:	f006 f943 	bl	8006820 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(buffer[0] != '\0'){
 800059a:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <main+0x144>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0fb      	beq.n	800059a <main+0x16>
	  		  char c = buffer[0];
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <main+0x144>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  		  int num = c;
 80005aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
	  		  int j = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
	  		  int a[8];
	  		  int multby = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  		  int finalvalue = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
	  		  for( j = 0; j<8; j++){
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
 80005c0:	e04b      	b.n	800065a <main+0xd6>
	  			  a[j] = num%2;
 80005c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	bfb8      	it	lt
 80005cc:	425b      	neglt	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	3338      	adds	r3, #56	; 0x38
 80005d6:	443b      	add	r3, r7
 80005d8:	f843 2c38 	str.w	r2, [r3, #-56]
	  			  num=num/2;
 80005dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005de:	0fda      	lsrs	r2, r3, #31
 80005e0:	4413      	add	r3, r2
 80005e2:	105b      	asrs	r3, r3, #1
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
	  			  printf("a[%d]=%d\n",j,a[j]);
 80005e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	3338      	adds	r3, #56	; 0x38
 80005ec:	443b      	add	r3, r7
 80005ee:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80005f2:	461a      	mov	r2, r3
 80005f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80005f6:	4835      	ldr	r0, [pc, #212]	; (80006cc <main+0x148>)
 80005f8:	f006 fe82 	bl	8007300 <iprintf>
	  			  HAL_GPIO_WritePin(GPIOD,OutputPin_Pin,a[j]);
 80005fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	3338      	adds	r3, #56	; 0x38
 8000602:	443b      	add	r3, r7
 8000604:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	4830      	ldr	r0, [pc, #192]	; (80006d0 <main+0x14c>)
 8000610:	f000 fdea 	bl	80011e8 <HAL_GPIO_WritePin>
	  			  HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fafd 	bl	8000c14 <HAL_Delay>
	  			  readvalue = HAL_GPIO_ReadPin(GPIOB,InputPin_Pin);
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	482d      	ldr	r0, [pc, #180]	; (80006d4 <main+0x150>)
 8000620:	f000 fdca 	bl	80011b8 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <main+0x154>)
 800062a:	601a      	str	r2, [r3, #0]
	  			  readvalues[j] = readvalue;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <main+0x154>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	492a      	ldr	r1, [pc, #168]	; (80006dc <main+0x158>)
 8000632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			  finalvalue = finalvalue+multby*readvalue;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <main+0x154>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800063e:	fb03 f202 	mul.w	r2, r3, r2
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	4413      	add	r3, r2
 8000646:	623b      	str	r3, [r7, #32]
	  			  multby=multby*2;
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  			  HAL_Delay(100);
 800064e:	2064      	movs	r0, #100	; 0x64
 8000650:	f000 fae0 	bl	8000c14 <HAL_Delay>
	  		  for( j = 0; j<8; j++){
 8000654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000656:	3301      	adds	r3, #1
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	2b07      	cmp	r3, #7
 800065e:	ddb0      	ble.n	80005c2 <main+0x3e>
	  		  }

	  		 bit0= readvalues[0];
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <main+0x158>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <main+0x15c>)
 8000666:	6013      	str	r3, [r2, #0]
	  		 bit1= readvalues[1]*2;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <main+0x158>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <main+0x160>)
 8000670:	6013      	str	r3, [r2, #0]
	  		 bit2= readvalues[2]*4;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <main+0x158>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <main+0x164>)
 800067a:	6013      	str	r3, [r2, #0]
	  		 bit3= readvalues[3]*8;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <main+0x158>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <main+0x168>)
 8000684:	6013      	str	r3, [r2, #0]
	  		 bit4= readvalues[4]*16;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <main+0x158>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <main+0x16c>)
 800068e:	6013      	str	r3, [r2, #0]
	  		 bit5= readvalues[5]*32;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <main+0x158>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	015b      	lsls	r3, r3, #5
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <main+0x170>)
 8000698:	6013      	str	r3, [r2, #0]
	  		 bit6= readvalues[6]*64;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <main+0x158>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	019b      	lsls	r3, r3, #6
 80006a0:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <main+0x174>)
 80006a2:	6013      	str	r3, [r2, #0]
	  		 bit7= readvalues[7]*128;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <main+0x158>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	01db      	lsls	r3, r3, #7
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <main+0x178>)
 80006ac:	6013      	str	r3, [r2, #0]

	  		char* chartosend = &finalvalue;
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24

	  		CDC_Transmit_FS((uint8_t*) chartosend, strlen(chartosend));
 80006b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006b6:	f7ff fd8b 	bl	80001d0 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4619      	mov	r1, r3
 80006be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006c0:	f006 f982 	bl	80069c8 <CDC_Transmit_FS>
	  if(buffer[0] != '\0'){
 80006c4:	e769      	b.n	800059a <main+0x16>
 80006c6:	bf00      	nop
 80006c8:	2000017c 	.word	0x2000017c
 80006cc:	08008234 	.word	0x08008234
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40020400 	.word	0x40020400
 80006d8:	200001bc 	.word	0x200001bc
 80006dc:	200001c0 	.word	0x200001c0
 80006e0:	200001e0 	.word	0x200001e0
 80006e4:	200001e4 	.word	0x200001e4
 80006e8:	200001e8 	.word	0x200001e8
 80006ec:	200001ec 	.word	0x200001ec
 80006f0:	200001f0 	.word	0x200001f0
 80006f4:	200001f4 	.word	0x200001f4
 80006f8:	200001f8 	.word	0x200001f8
 80006fc:	200001fc 	.word	0x200001fc

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fdee 	bl	80072f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a26      	ldr	r2, [pc, #152]	; (80007c8 <SystemClock_Config+0xc8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <SystemClock_Config+0xc8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <SystemClock_Config+0xcc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <SystemClock_Config+0xcc>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <SystemClock_Config+0xcc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000774:	2348      	movs	r3, #72	; 0x48
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800077c:	2303      	movs	r3, #3
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f001 ffc5 	bl	8002714 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 f88c 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fa27 	bl	8002c04 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007bc:	f000 f876 	bl	80008ac <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	; 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OutputPin_GPIO_Port, OutputPin_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800085c:	f000 fcc4 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputPin_Pin */
  GPIO_InitStruct.Pin = InputPin_Pin;
 8000860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(InputPin_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000876:	f000 fb03 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OutputPin_Pin */
  GPIO_InitStruct.Pin = OutputPin_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OutputPin_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000892:	f000 faf5 	bl	8000e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40020400 	.word	0x40020400

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f93e 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <OTG_FS_IRQHandler+0x10>)
 8000962:	f000 fdaa 	bl	80014ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200016e8 	.word	0x200016e8

08000970 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
  }

  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
  }
  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f006 fc00 	bl	8007280 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20020000 	.word	0x20020000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000200 	.word	0x20000200
 8000ab4:	20001e28 	.word	0x20001e28

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd7 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f006 fbbf 	bl	800728c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd39 	bl	8000584 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000b20:	08008340 	.word	0x08008340
  ldr r2, =_sbss
 8000b24:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000b28:	20001e24 	.word	0x20001e24

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f94f 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fea8 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f967 	bl	8000e66 <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f92f 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000204 	.word	0x20000204

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000204 	.word	0x20000204

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff29 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff3e 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff31 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffa2 	bl	8000db8 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e16b      	b.n	8001174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 815a 	bne.w	800116e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d005      	beq.n	8000ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d017      	beq.n	8000f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d123      	bne.n	8000fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	69b9      	ldr	r1, [r7, #24]
 8000fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0203 	and.w	r2, r3, #3
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80b4 	beq.w	800116e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b60      	ldr	r3, [pc, #384]	; (800118c <HAL_GPIO_Init+0x30c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a5f      	ldr	r2, [pc, #380]	; (800118c <HAL_GPIO_Init+0x30c>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_GPIO_Init+0x30c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001022:	4a5b      	ldr	r2, [pc, #364]	; (8001190 <HAL_GPIO_Init+0x310>)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x314>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d02b      	beq.n	80010a6 <HAL_GPIO_Init+0x226>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a51      	ldr	r2, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x318>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d025      	beq.n	80010a2 <HAL_GPIO_Init+0x222>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x31c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01f      	beq.n	800109e <HAL_GPIO_Init+0x21e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x320>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x21a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x324>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x216>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x328>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x212>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x32c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x20e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_GPIO_Init+0x330>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x20a>
 8001086:	2307      	movs	r3, #7
 8001088:	e00e      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800108a:	2308      	movs	r3, #8
 800108c:	e00c      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800108e:	2306      	movs	r3, #6
 8001090:	e00a      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 8001092:	2305      	movs	r3, #5
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 8001096:	2304      	movs	r3, #4
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_GPIO_Init+0x310>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_GPIO_Init+0x334>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a32      	ldr	r2, [pc, #200]	; (80011b4 <HAL_GPIO_Init+0x334>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <HAL_GPIO_Init+0x334>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <HAL_GPIO_Init+0x334>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_GPIO_Init+0x334>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_GPIO_Init+0x334>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f ae90 	bls.w	8000e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40021c00 	.word	0x40021c00
 80011b4:	40013c00 	.word	0x40013c00

080011b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800121a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121c:	b08f      	sub	sp, #60	; 0x3c
 800121e:	af0a      	add	r7, sp, #40	; 0x28
 8001220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e10f      	b.n	800144c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f005 fd06 	bl	8006c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f001 ffd7 	bl	800321e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	687e      	ldr	r6, [r7, #4]
 8001278:	466d      	mov	r5, sp
 800127a:	f106 0410 	add.w	r4, r6, #16
 800127e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800128a:	e885 0003 	stmia.w	r5, {r0, r1}
 800128e:	1d33      	adds	r3, r6, #4
 8001290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f001 feae 	bl	8002ff4 <USB_CoreInit>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2202      	movs	r2, #2
 80012a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0d0      	b.n	800144c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 ffc5 	bl	8003240 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e04a      	b.n	8001352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	333d      	adds	r3, #61	; 0x3d
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	333c      	adds	r3, #60	; 0x3c
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	b298      	uxth	r0, r3
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	3344      	adds	r3, #68	; 0x44
 80012f8:	4602      	mov	r2, r0
 80012fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3340      	adds	r3, #64	; 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	3348      	adds	r3, #72	; 0x48
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	334c      	adds	r3, #76	; 0x4c
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3354      	adds	r3, #84	; 0x54
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	3301      	adds	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3af      	bcc.n	80012bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e044      	b.n	80013ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	3301      	adds	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d3b5      	bcc.n	8001362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	687e      	ldr	r6, [r7, #4]
 80013fe:	466d      	mov	r5, sp
 8001400:	f106 0410 	add.w	r4, r6, #16
 8001404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001410:	e885 0003 	stmia.w	r5, {r0, r1}
 8001414:	1d33      	adds	r3, r6, #4
 8001416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f001 ff5d 	bl	80032d8 <USB_DevInit>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e00d      	b.n	800144c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f8ac 	bl	80045a2 <USB_DevDisconnect>

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001454 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_PCD_Start+0x1c>
 800146c:	2302      	movs	r3, #2
 800146e:	e020      	b.n	80014b2 <HAL_PCD_Start+0x5e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	2b01      	cmp	r3, #1
 800147e:	d109      	bne.n	8001494 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f001 feaf 	bl	80031fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 f85c 	bl	8004560 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b08d      	sub	sp, #52	; 0x34
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f91a 	bl	800470a <USB_GetMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 848a 	bne.w	8001df2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 f87e 	bl	80045e4 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8480 	beq.w	8001df0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 f86b 	bl	80045e4 <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b02      	cmp	r3, #2
 8001516:	d107      	bne.n	8001528 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f002 0202 	and.w	r2, r2, #2
 8001526:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f859 	bl	80045e4 <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b10      	cmp	r3, #16
 800153a:	d161      	bne.n	8001600 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0210 	bic.w	r2, r2, #16
 800154a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	f003 020f 	and.w	r2, r3, #15
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	3304      	adds	r3, #4
 800156a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	0c5b      	lsrs	r3, r3, #17
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	2b02      	cmp	r3, #2
 8001576:	d124      	bne.n	80015c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d035      	beq.n	80015f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800158e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001592:	b29b      	uxth	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	6a38      	ldr	r0, [r7, #32]
 8001598:	f002 fe90 	bl	80042bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a8:	441a      	add	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ba:	441a      	add	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	621a      	str	r2, [r3, #32]
 80015c0:	e016      	b.n	80015f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	0c5b      	lsrs	r3, r3, #17
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d110      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015d4:	2208      	movs	r2, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	6a38      	ldr	r0, [r7, #32]
 80015da:	f002 fe6f 	bl	80042bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ea:	441a      	add	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0210 	orr.w	r2, r2, #16
 80015fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 ffed 	bl	80045e4 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001610:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001614:	f040 80a7 	bne.w	8001766 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fff2 	bl	800460a <USB_ReadDevAllOutEpInterrupt>
 8001626:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001628:	e099      	b.n	800175e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808e 	beq.w	8001752 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f816 	bl	8004672 <USB_ReadDevOutEPInterrupt>
 8001646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00c      	beq.n	800166c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800165e:	461a      	mov	r2, r3
 8001660:	2301      	movs	r3, #1
 8001662:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fec2 	bl	80023f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001682:	461a      	mov	r2, r3
 8001684:	2308      	movs	r3, #8
 8001686:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 ff98 	bl	80025c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a6:	461a      	mov	r2, r3
 80016a8:	2310      	movs	r3, #16
 80016aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d030      	beq.n	8001718 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b80      	cmp	r3, #128	; 0x80
 80016c0:	d109      	bne.n	80016d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	3304      	adds	r3, #4
 80016ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	78db      	ldrb	r3, [r3, #3]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2200      	movs	r2, #0
 80016f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f005 fbaf 	bl	8006e64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001712:	461a      	mov	r2, r3
 8001714:	2302      	movs	r3, #2
 8001716:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172e:	461a      	mov	r2, r3
 8001730:	2320      	movs	r3, #32
 8001732:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174a:	461a      	mov	r2, r3
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	f47f af62 	bne.w	800162a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 ff3a 	bl	80045e4 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800177a:	f040 80db 	bne.w	8001934 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 ff5b 	bl	800463e <USB_ReadDevAllInEpInterrupt>
 8001788:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800178e:	e0cd      	b.n	800192c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80c2 	beq.w	8001920 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 ff81 	bl	80046ae <USB_ReadDevInEPInterrupt>
 80017ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d057      	beq.n	8001868 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	2201      	movs	r2, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017d8:	4013      	ands	r3, r2
 80017da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e8:	461a      	mov	r2, r3
 80017ea:	2301      	movs	r3, #1
 80017ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d132      	bne.n	800185c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	334c      	adds	r3, #76	; 0x4c
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4403      	add	r3, r0
 8001816:	3348      	adds	r3, #72	; 0x48
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4419      	add	r1, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4403      	add	r3, r0
 800182a:	334c      	adds	r3, #76	; 0x4c
 800182c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	2b00      	cmp	r3, #0
 8001832:	d113      	bne.n	800185c <HAL_PCD_IRQHandler+0x3a2>
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3354      	adds	r3, #84	; 0x54
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001854:	461a      	mov	r2, r3
 8001856:	2101      	movs	r1, #1
 8001858:	f002 ff88 	bl	800476c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f005 fa79 	bl	8006d5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187e:	461a      	mov	r2, r3
 8001880:	2308      	movs	r3, #8
 8001882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189a:	461a      	mov	r2, r3
 800189c:	2310      	movs	r3, #16
 800189e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b6:	461a      	mov	r2, r3
 80018b8:	2340      	movs	r3, #64	; 0x40
 80018ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d023      	beq.n	800190e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80018c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c8:	6a38      	ldr	r0, [r7, #32]
 80018ca:	f001 fe69 	bl	80035a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	3338      	adds	r3, #56	; 0x38
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	3304      	adds	r3, #4
 80018e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	78db      	ldrb	r3, [r3, #3]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2200      	movs	r2, #0
 80018ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f005 fac6 	bl	8006e88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4413      	add	r3, r2
 8001904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001908:	461a      	mov	r2, r3
 800190a:	2302      	movs	r3, #2
 800190c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fcdb 	bl	80022d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3301      	adds	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	f47f af2e 	bne.w	8001790 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fe53 	bl	80045e4 <USB_ReadInterrupts>
 800193e:	4603      	mov	r3, r0
 8001940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001948:	d122      	bne.n	8001990 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001964:	2b01      	cmp	r3, #1
 8001966:	d108      	bne.n	800197a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001970:	2100      	movs	r1, #0
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fec2 	bl	80026fc <HAL_PCDEx_LPM_Callback>
 8001978:	e002      	b.n	8001980 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f005 fa64 	bl	8006e48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fe25 	bl	80045e4 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a4:	d112      	bne.n	80019cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f005 fa20 	bl	8006dfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fe07 	bl	80045e4 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e0:	f040 80b7 	bne.w	8001b52 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2110      	movs	r1, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fdce 	bl	80035a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a08:	e046      	b.n	8001a98 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a16:	461a      	mov	r2, r3
 8001a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2e:	0151      	lsls	r1, r2, #5
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	440a      	add	r2, r1
 8001a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a62:	0151      	lsls	r1, r2, #5
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	440a      	add	r2, r1
 8001a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a82:	0151      	lsls	r1, r2, #5
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	440a      	add	r2, r1
 8001a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	3301      	adds	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3b3      	bcc.n	8001a0a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ab4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d016      	beq.n	8001aec <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ace:	f043 030b 	orr.w	r3, r3, #11
 8001ad2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae4:	f043 030b 	orr.w	r3, r3, #11
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	e015      	b.n	8001b18 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001afe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b12:	f043 030b 	orr.w	r3, r3, #11
 8001b16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f002 fe15 	bl	800476c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fd44 	bl	80045e4 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b66:	d124      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fdda 	bl	8004726 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fd8f 	bl	800369a <USB_GetDevSpeed>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	f001 fa28 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8001b8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	4620      	mov	r0, r4
 8001b98:	f001 fa8e 	bl	80030b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f005 f904 	bl	8006daa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 fd14 	bl	80045e4 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d10a      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f005 f8e1 	bl	8006d8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f002 0208 	and.w	r2, r2, #8
 8001bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fcff 	bl	80045e4 <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d122      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001c00:	e014      	b.n	8001c2c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fb27 	bl	8002274 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3e5      	bcc.n	8001c02 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fcd2 	bl	80045e4 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c4a:	d13b      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	e02b      	b.n	8001caa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3340      	adds	r3, #64	; 0x40
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d115      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da12      	bge.n	8001ca4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	333f      	adds	r3, #63	; 0x3f
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fae8 	bl	8002274 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3ce      	bcc.n	8001c52 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fc8b 	bl	80045e4 <USB_ReadInterrupts>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cd8:	d155      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cda:	2301      	movs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cde:	e045      	b.n	8001d6c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d12e      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da2b      	bge.n	8001d66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d121      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6053      	str	r3, [r2, #4]
            break;
 8001d64:	e007      	b.n	8001d76 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	3301      	adds	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3b4      	bcc.n	8001ce0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 fc2a 	bl	80045e4 <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9a:	d10a      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f005 f885 	bl	8006eac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fc14 	bl	80045e4 <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d115      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f005 f875 	bl	8006ec8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e000      	b.n	8001df2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001df0:	bf00      	nop
    }
  }
}
 8001df2:	3734      	adds	r7, #52	; 0x34
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}

08001df8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_PCD_SetAddress+0x1a>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e013      	b.n	8001e3a <HAL_PCD_SetAddress+0x42>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fb72 	bl	8004514 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	4608      	mov	r0, r1
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	70fb      	strb	r3, [r7, #3]
 8001e54:	460b      	mov	r3, r1
 8001e56:	803b      	strh	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da0f      	bge.n	8001e88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3338      	adds	r3, #56	; 0x38
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
 8001e86:	e00f      	b.n	8001ea8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb4:	883a      	ldrh	r2, [r7, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	78ba      	ldrb	r2, [r7, #2]
 8001ebe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	785b      	ldrb	r3, [r3, #1]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ed2:	78bb      	ldrb	r3, [r7, #2]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_EP_Open+0xaa>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e00e      	b.n	8001f0a <HAL_PCD_EP_Open+0xc8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 fbf2 	bl	80036e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f08:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da0f      	bge.n	8001f46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3338      	adds	r3, #56	; 0x38
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	705a      	strb	r2, [r3, #1]
 8001f44:	e00f      	b.n	8001f66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_PCD_EP_Close+0x6e>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e00e      	b.n	8001f9e <HAL_PCD_EP_Close+0x8c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fc30 	bl	80037f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d102      	bne.n	8002002 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	6979      	ldr	r1, [r7, #20]
 800201a:	f001 ff0f 	bl	8003e3c <USB_EP0StartXfer>
 800201e:	e008      	b.n	8002032 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	6979      	ldr	r1, [r7, #20]
 800202e:	f001 fcbd 	bl	80039ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	460b      	mov	r3, r1
 800207a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3338      	adds	r3, #56	; 0x38
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2201      	movs	r2, #1
 80020aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d102      	bne.n	80020c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	6979      	ldr	r1, [r7, #20]
 80020de:	f001 fead 	bl	8003e3c <USB_EP0StartXfer>
 80020e2:	e008      	b.n	80020f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	6979      	ldr	r1, [r7, #20]
 80020f2:	f001 fc5b 	bl	80039ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	d901      	bls.n	800211e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e050      	b.n	80021c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800211e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da0f      	bge.n	8002146 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	3338      	adds	r3, #56	; 0x38
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	705a      	strb	r2, [r3, #1]
 8002144:	e00d      	b.n	8002162 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_PCD_EP_SetStall+0x82>
 800217e:	2302      	movs	r3, #2
 8002180:	e01e      	b.n	80021c0 <HAL_PCD_EP_SetStall+0xc0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 f8eb 	bl	800436c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	b2d9      	uxtb	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021b0:	461a      	mov	r2, r3
 80021b2:	f002 fadb 	bl	800476c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d901      	bls.n	80021e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e042      	b.n	800226c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da0f      	bge.n	800220e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	705a      	strb	r2, [r3, #1]
 800220c:	e00f      	b.n	800222e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_PCD_EP_ClrStall+0x86>
 800224a:	2302      	movs	r3, #2
 800224c:	e00e      	b.n	800226c <HAL_PCD_EP_ClrStall+0xa4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 f8f3 	bl	8004448 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da0c      	bge.n	80022a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3338      	adds	r3, #56	; 0x38
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e00c      	b.n	80022bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 020f 	and.w	r2, r3, #15
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 ff12 	bl	80040ec <USB_EPStopXfer>
 80022c8:	4603      	mov	r3, r0
 80022ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80022cc:	7afb      	ldrb	r3, [r7, #11]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b08a      	sub	sp, #40	; 0x28
 80022da:	af02      	add	r7, sp, #8
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3338      	adds	r3, #56	; 0x38
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	429a      	cmp	r2, r3
 8002308:	d901      	bls.n	800230e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06c      	b.n	80023e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	429a      	cmp	r2, r3
 8002322:	d902      	bls.n	800232a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3303      	adds	r3, #3
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002332:	e02b      	b.n	800238c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	429a      	cmp	r2, r3
 8002348:	d902      	bls.n	8002350 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3303      	adds	r3, #3
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002368:	b2db      	uxtb	r3, r3
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4603      	mov	r3, r0
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f001 ff66 	bl	8004240 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	441a      	add	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	b29b      	uxth	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d809      	bhi.n	80023b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d203      	bcs.n	80023b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1be      	bne.n	8002334 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d811      	bhi.n	80023e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	2201      	movs	r2, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	43db      	mvns	r3, r3
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023e2:	4013      	ands	r3, r2
 80023e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	333c      	adds	r3, #60	; 0x3c
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d17b      	bne.n	800251e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f240 80b9 	bls.w	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80b3 	beq.w	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002452:	461a      	mov	r2, r3
 8002454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002458:	6093      	str	r3, [r2, #8]
 800245a:	e0a7      	b.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	461a      	mov	r2, r3
 8002474:	2320      	movs	r3, #32
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	e098      	b.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 8093 	bne.w	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d90f      	bls.n	80024ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	e07e      	b.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	3304      	adds	r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	0159      	lsls	r1, r3, #5
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	440b      	add	r3, r1
 80024d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d114      	bne.n	8002510 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024f8:	461a      	mov	r2, r3
 80024fa:	2101      	movs	r1, #1
 80024fc:	f002 f936 	bl	800476c <USB_EP0_OutStart>
 8002500:	e006      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	441a      	add	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f004 fc04 	bl	8006d24 <HAL_PCD_DataOutStageCallback>
 800251c:	e046      	b.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d124      	bne.n	8002570 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002542:	6093      	str	r3, [r2, #8]
 8002544:	e032      	b.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255c:	461a      	mov	r2, r3
 800255e:	2320      	movs	r3, #32
 8002560:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f004 fbdb 	bl	8006d24 <HAL_PCD_DataOutStageCallback>
 800256e:	e01d      	b.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d114      	bne.n	80025a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002598:	461a      	mov	r2, r3
 800259a:	2100      	movs	r1, #0
 800259c:	f002 f8e6 	bl	800476c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f004 fbbc 	bl	8006d24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	4f54300a 	.word	0x4f54300a
 80025bc:	4f54310a 	.word	0x4f54310a

080025c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	333c      	adds	r3, #60	; 0x3c
 80025d8:	3304      	adds	r3, #4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a15      	ldr	r2, [pc, #84]	; (8002648 <PCD_EP_OutSetupPacket_int+0x88>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d90e      	bls.n	8002614 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002612:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f004 fb73 	bl	8006d00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <PCD_EP_OutSetupPacket_int+0x88>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d90c      	bls.n	800263c <PCD_EP_OutSetupPacket_int+0x7c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d108      	bne.n	800263c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002634:	461a      	mov	r2, r3
 8002636:	2101      	movs	r1, #1
 8002638:	f002 f898 	bl	800476c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	4f54300a 	.word	0x4f54300a

0800264c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	4613      	mov	r3, r2
 800265a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800266a:	883b      	ldrh	r3, [r7, #0]
 800266c:	0419      	lsls	r1, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	430a      	orrs	r2, r1
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
 8002678:	e028      	b.n	80026cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4413      	add	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e00d      	b.n	80026aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3340      	adds	r3, #64	; 0x40
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3ec      	bcc.n	800268e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026b4:	883b      	ldrh	r3, [r7, #0]
 80026b6:	0418      	lsls	r0, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	3b01      	subs	r3, #1
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4302      	orrs	r2, r0
 80026c4:	3340      	adds	r3, #64	; 0x40
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e267      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d075      	beq.n	800281e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d112      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002756:	d10b      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b7e      	ldr	r3, [pc, #504]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05b      	beq.n	800281c <HAL_RCC_OscConfig+0x108>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d157      	bne.n	800281c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e242      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x74>
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6f      	ldr	r2, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6c      	ldr	r2, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 80027ac:	4b69      	ldr	r3, [pc, #420]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a68      	ldr	r2, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b66      	ldr	r3, [pc, #408]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fa16 	bl	8000bfc <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fa12 	bl	8000bfc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e207      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xc0>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fa02 	bl	8000bfc <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe f9fe 	bl	8000bfc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1f3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0xe8>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d063      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1c7      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_OscConfig+0x244>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe f9b7 	bl	8000bfc <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe f9b3 	bl	8000bfc <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1a8      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_OscConfig+0x244>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe f996 	bl	8000bfc <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe f992 	bl	8000bfc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e187      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x248>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe f976 	bl	8000bfc <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe f972 	bl	8000bfc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e167      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x200>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_OscConfig+0x248>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7fe f95f 	bl	8000bfc <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe f95b 	bl	8000bfc <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e150      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b81      	ldr	r3, [pc, #516]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7d      	ldr	r3, [pc, #500]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a7c      	ldr	r2, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b77      	ldr	r3, [pc, #476]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b74      	ldr	r3, [pc, #464]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a73      	ldr	r2, [pc, #460]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe f91b 	bl	8000bfc <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe f917 	bl	8000bfc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e10c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x2ea>
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a63      	ldr	r2, [pc, #396]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x30c>
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
 8002a12:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	4a5b      	ldr	r2, [pc, #364]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 8002a20:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a57      	ldr	r2, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a54      	ldr	r2, [pc, #336]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe f8dc 	bl	8000bfc <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe f8d8 	bl	8000bfc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0cb      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x334>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe f8c6 	bl	8000bfc <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe f8c2 	bl	8000bfc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0b5      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a38      	ldr	r2, [pc, #224]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a1 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d05c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d141      	bne.n	8002b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe f896 	bl	8000bfc <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f892 	bl	8000bfc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e087      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	491b      	ldr	r1, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe f86b 	bl	8000bfc <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe f867 	bl	8000bfc <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e05c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x416>
 8002b48:	e054      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe f854 	bl	8000bfc <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe f850 	bl	8000bfc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e045      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x444>
 8002b76:	e03d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e038      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCC_OscConfig+0x4ec>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d121      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0cc      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d90c      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d044      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e067      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4934      	ldr	r1, [pc, #208]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fd ff82 	bl	8000bfc <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fd ff7e 	bl	8000bfc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e04f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d20c      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fee2 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08008288 	.word	0x08008288
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b094      	sub	sp, #80	; 0x50
 8002dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
 8002ddc:	2300      	movs	r3, #0
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	2300      	movs	r3, #0
 8002de2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de8:	4b79      	ldr	r3, [pc, #484]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d00d      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x40>
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	f200 80e1 	bhi.w	8002fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x34>
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e02:	e0db      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e08:	e0db      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0a:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0e:	e0d8      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e10:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e26:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e42:	4622      	mov	r2, r4
 8002e44:	462b      	mov	r3, r5
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	1a51      	subs	r1, r2, r1
 8002e5e:	6139      	str	r1, [r7, #16]
 8002e60:	4629      	mov	r1, r5
 8002e62:	eb63 0301 	sbc.w	r3, r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	018b      	lsls	r3, r1, #6
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7e:	4651      	mov	r1, sl
 8002e80:	018a      	lsls	r2, r1, #6
 8002e82:	4651      	mov	r1, sl
 8002e84:	ebb2 0801 	subs.w	r8, r2, r1
 8002e88:	4659      	mov	r1, fp
 8002e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea2:	4690      	mov	r8, r2
 8002ea4:	4699      	mov	r9, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	eb18 0303 	adds.w	r3, r8, r3
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	eb49 0303 	adc.w	r3, r9, r3
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	024b      	lsls	r3, r1, #9
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ecc:	4621      	mov	r1, r4
 8002ece:	024a      	lsls	r2, r1, #9
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee0:	f7fd f9ce 	bl	8000280 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eec:	e058      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	4611      	mov	r1, r2
 8002efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
 8002f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	0159      	lsls	r1, r3, #5
 8002f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1a:	0150      	lsls	r0, r2, #5
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4641      	mov	r1, r8
 8002f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f26:	4649      	mov	r1, r9
 8002f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f40:	ebb2 040a 	subs.w	r4, r2, sl
 8002f44:	eb63 050b 	sbc.w	r5, r3, fp
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	464b      	mov	r3, r9
 8002f64:	eb45 0303 	adc.w	r3, r5, r3
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f76:	4629      	mov	r1, r5
 8002f78:	028b      	lsls	r3, r1, #10
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f80:	4621      	mov	r1, r4
 8002f82:	028a      	lsls	r2, r1, #10
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	61fa      	str	r2, [r7, #28]
 8002f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f94:	f7fd f974 	bl	8000280 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3750      	adds	r7, #80	; 0x50
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	f107 001c 	add.w	r0, r7, #28
 8003002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2b01      	cmp	r3, #1
 800300a:	d122      	bne.n	8003052 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 fbee 	bl	8004828 <USB_CoreReset>
 800304c:	4603      	mov	r3, r0
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e01a      	b.n	8003088 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f001 fbe2 	bl	8004828 <USB_CoreReset>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
 800307a:	e005      	b.n	8003088 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10b      	bne.n	80030a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f043 0206 	orr.w	r2, r3, #6
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030b2:	b004      	add	sp, #16
 80030b4:	4770      	bx	lr
	...

080030b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d165      	bne.n	8003198 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4a41      	ldr	r2, [pc, #260]	; (80031d4 <USB_SetTurnaroundTime+0x11c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d906      	bls.n	80030e2 <USB_SetTurnaroundTime+0x2a>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4a40      	ldr	r2, [pc, #256]	; (80031d8 <USB_SetTurnaroundTime+0x120>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d202      	bcs.n	80030e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80030dc:	230f      	movs	r3, #15
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e062      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <USB_SetTurnaroundTime+0x120>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d306      	bcc.n	80030f8 <USB_SetTurnaroundTime+0x40>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <USB_SetTurnaroundTime+0x124>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d202      	bcs.n	80030f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80030f2:	230e      	movs	r3, #14
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e057      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4a38      	ldr	r2, [pc, #224]	; (80031dc <USB_SetTurnaroundTime+0x124>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d306      	bcc.n	800310e <USB_SetTurnaroundTime+0x56>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <USB_SetTurnaroundTime+0x128>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d202      	bcs.n	800310e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003108:	230d      	movs	r3, #13
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e04c      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <USB_SetTurnaroundTime+0x128>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d306      	bcc.n	8003124 <USB_SetTurnaroundTime+0x6c>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <USB_SetTurnaroundTime+0x12c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800311e:	230c      	movs	r3, #12
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e041      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <USB_SetTurnaroundTime+0x12c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d906      	bls.n	800313a <USB_SetTurnaroundTime+0x82>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4a2e      	ldr	r2, [pc, #184]	; (80031e8 <USB_SetTurnaroundTime+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d802      	bhi.n	800313a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003134:	230b      	movs	r3, #11
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e036      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <USB_SetTurnaroundTime+0x130>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d906      	bls.n	8003150 <USB_SetTurnaroundTime+0x98>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <USB_SetTurnaroundTime+0x134>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d802      	bhi.n	8003150 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800314a:	230a      	movs	r3, #10
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e02b      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4a26      	ldr	r2, [pc, #152]	; (80031ec <USB_SetTurnaroundTime+0x134>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d906      	bls.n	8003166 <USB_SetTurnaroundTime+0xae>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <USB_SetTurnaroundTime+0x138>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d202      	bcs.n	8003166 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003160:	2309      	movs	r3, #9
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e020      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <USB_SetTurnaroundTime+0x138>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d306      	bcc.n	800317c <USB_SetTurnaroundTime+0xc4>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <USB_SetTurnaroundTime+0x13c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d802      	bhi.n	800317c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003176:	2308      	movs	r3, #8
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e015      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <USB_SetTurnaroundTime+0x13c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d906      	bls.n	8003192 <USB_SetTurnaroundTime+0xda>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <USB_SetTurnaroundTime+0x140>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d202      	bcs.n	8003192 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800318c:	2307      	movs	r3, #7
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e00a      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003192:	2306      	movs	r3, #6
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e007      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800319e:	2309      	movs	r3, #9
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e001      	b.n	80031a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80031a4:	2309      	movs	r3, #9
 80031a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	00d8acbf 	.word	0x00d8acbf
 80031d8:	00e4e1c0 	.word	0x00e4e1c0
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	01067380 	.word	0x01067380
 80031e4:	011a499f 	.word	0x011a499f
 80031e8:	01312cff 	.word	0x01312cff
 80031ec:	014ca43f 	.word	0x014ca43f
 80031f0:	016e3600 	.word	0x016e3600
 80031f4:	01a6ab1f 	.word	0x01a6ab1f
 80031f8:	01e84800 	.word	0x01e84800

080031fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d115      	bne.n	800328e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800326e:	2001      	movs	r0, #1
 8003270:	f7fd fcd0 	bl	8000c14 <HAL_Delay>
      ms++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f001 fa45 	bl	800470a <USB_GetMode>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d01e      	beq.n	80032c4 <USB_SetCurrentMode+0x84>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b31      	cmp	r3, #49	; 0x31
 800328a:	d9f0      	bls.n	800326e <USB_SetCurrentMode+0x2e>
 800328c:	e01a      	b.n	80032c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fd fcb7 	bl	8000c14 <HAL_Delay>
      ms++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fa2c 	bl	800470a <USB_GetMode>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <USB_SetCurrentMode+0x84>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b31      	cmp	r3, #49	; 0x31
 80032bc:	d9f0      	bls.n	80032a0 <USB_SetCurrentMode+0x60>
 80032be:	e001      	b.n	80032c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e005      	b.n	80032d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b32      	cmp	r3, #50	; 0x32
 80032c8:	d101      	bne.n	80032ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032d8:	b084      	sub	sp, #16
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	e009      	b.n	800330c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	3340      	adds	r3, #64	; 0x40
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0e      	cmp	r3, #14
 8003310:	d9f2      	bls.n	80032f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11c      	bne.n	8003352 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
 8003350:	e00b      	b.n	800336a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003370:	461a      	mov	r2, r3
 8003372:	2300      	movs	r3, #0
 8003374:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	4619      	mov	r1, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003384:	461a      	mov	r2, r3
 8003386:	680b      	ldr	r3, [r1, #0]
 8003388:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10c      	bne.n	80033aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003396:	2100      	movs	r1, #0
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f965 	bl	8003668 <USB_SetDevSpeed>
 800339e:	e008      	b.n	80033b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033a0:	2101      	movs	r1, #1
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f960 	bl	8003668 <USB_SetDevSpeed>
 80033a8:	e003      	b.n	80033b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033aa:	2103      	movs	r1, #3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f95b 	bl	8003668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033b2:	2110      	movs	r1, #16
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8f3 	bl	80035a0 <USB_FlushTxFifo>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f91f 	bl	8003608 <USB_FlushRxFifo>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	461a      	mov	r2, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	461a      	mov	r2, r3
 80033e8:	2300      	movs	r3, #0
 80033ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	461a      	mov	r2, r3
 80033f4:	2300      	movs	r3, #0
 80033f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e043      	b.n	8003486 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003414:	d118      	bne.n	8003448 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	461a      	mov	r2, r3
 800342a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	e013      	b.n	800345a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e008      	b.n	800345a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003454:	461a      	mov	r2, r3
 8003456:	2300      	movs	r3, #0
 8003458:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800347e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3301      	adds	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d3b7      	bcc.n	80033fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e043      	b.n	800351c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034aa:	d118      	bne.n	80034de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	461a      	mov	r2, r3
 80034c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e013      	b.n	80034f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e008      	b.n	80034f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	461a      	mov	r2, r3
 80034fe:	2300      	movs	r3, #0
 8003500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003514:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3301      	adds	r3, #1
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d3b7      	bcc.n	8003494 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003536:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003544:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <USB_DevInit+0x2c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f043 0208 	orr.w	r2, r3, #8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr
 800359c:	803c3800 	.word	0x803c3800

080035a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <USB_FlushTxFifo+0x64>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e01b      	b.n	80035f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	daf2      	bge.n	80035ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	019b      	lsls	r3, r3, #6
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a08      	ldr	r2, [pc, #32]	; (8003604 <USB_FlushTxFifo+0x64>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e006      	b.n	80035f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d0f0      	beq.n	80035d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	00030d40 	.word	0x00030d40

08003608 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3301      	adds	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a11      	ldr	r2, [pc, #68]	; (8003664 <USB_FlushRxFifo+0x5c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e018      	b.n	8003658 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	daf2      	bge.n	8003614 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2210      	movs	r2, #16
 8003636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <USB_FlushRxFifo+0x5c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e006      	b.n	8003658 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d0f0      	beq.n	8003638 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	00030d40 	.word	0x00030d40

08003668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0306 	and.w	r3, r3, #6
 80036b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
 80036be:	e00a      	b.n	80036d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d002      	beq.n	80036cc <USB_GetDevSpeed+0x32>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d102      	bne.n	80036d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80036cc:	2302      	movs	r3, #2
 80036ce:	75fb      	strb	r3, [r7, #23]
 80036d0:	e001      	b.n	80036d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80036d2:	230f      	movs	r3, #15
 80036d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d13a      	bne.n	8003776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	68f9      	ldr	r1, [r7, #12]
 800371a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800371e:	4313      	orrs	r3, r2
 8003720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d155      	bne.n	80037e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	791b      	ldrb	r3, [r3, #4]
 8003752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	059b      	lsls	r3, r3, #22
 800375a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800375c:	4313      	orrs	r3, r2
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	440a      	add	r2, r1
 8003766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e036      	b.n	80037e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11a      	bne.n	80037e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037ca:	430b      	orrs	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d161      	bne.n	80038d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003826:	d11f      	bne.n	8003868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003888:	4013      	ands	r3, r2
 800388a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ac:	4013      	ands	r3, r2
 80038ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	0159      	lsls	r1, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	4619      	mov	r1, r3
 80038cc:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <USB_DeactivateEndpoint+0x1b0>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
 80038d2:	e060      	b.n	8003996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ea:	d11f      	bne.n	800392c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800390a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	440a      	add	r2, r1
 8003922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800392a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	43db      	mvns	r3, r3
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800394c:	4013      	ands	r3, r2
 800394e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	43db      	mvns	r3, r3
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003970:	4013      	ands	r3, r2
 8003972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	0159      	lsls	r1, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	440b      	add	r3, r1
 800398a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398e:	4619      	mov	r1, r3
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <USB_DeactivateEndpoint+0x1b4>)
 8003992:	4013      	ands	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	ec337800 	.word	0xec337800
 80039a8:	eff37800 	.word	0xeff37800

080039ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 815c 	bne.w	8003c86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d132      	bne.n	8003a3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	0151      	lsls	r1, r2, #5
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	440a      	add	r2, r1
 80039ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a34:	0cdb      	lsrs	r3, r3, #19
 8003a36:	04db      	lsls	r3, r3, #19
 8003a38:	6113      	str	r3, [r2, #16]
 8003a3a:	e074      	b.n	8003b26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a56:	0cdb      	lsrs	r3, r3, #19
 8003a58:	04db      	lsls	r3, r3, #19
 8003a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6999      	ldr	r1, [r3, #24]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	440b      	add	r3, r1
 8003a98:	1e59      	subs	r1, r3, #1
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003aa4:	4b9d      	ldr	r3, [pc, #628]	; (8003d1c <USB_EPStartXfer+0x370>)
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	0148      	lsls	r0, r1, #5
 8003aac:	69f9      	ldr	r1, [r7, #28]
 8003aae:	4401      	add	r1, r0
 8003ab0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	69b9      	ldr	r1, [r7, #24]
 8003ad0:	0148      	lsls	r0, r1, #5
 8003ad2:	69f9      	ldr	r1, [r7, #28]
 8003ad4:	4401      	add	r1, r0
 8003ad6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	791b      	ldrb	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d11f      	bne.n	8003b26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d14b      	bne.n	8003bc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	791b      	ldrb	r3, [r3, #4]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d128      	bne.n	8003ba2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e00f      	b.n	8003ba2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	0151      	lsls	r1, r2, #5
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	440a      	add	r2, r1
 8003b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e133      	b.n	8003e2c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003be2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	791b      	ldrb	r3, [r3, #4]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d015      	beq.n	8003c18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 811b 	beq.w	8003e2c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2101      	movs	r1, #1
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	69f9      	ldr	r1, [r7, #28]
 8003c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c12:	4313      	orrs	r3, r2
 8003c14:	634b      	str	r3, [r1, #52]	; 0x34
 8003c16:	e109      	b.n	8003e2c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d110      	bne.n	8003c4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	e00f      	b.n	8003c6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6919      	ldr	r1, [r3, #16]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	b298      	uxth	r0, r3
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fade 	bl	8004240 <USB_WritePacket>
 8003c84:	e0d2      	b.n	8003e2c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca0:	0cdb      	lsrs	r3, r3, #19
 8003ca2:	04db      	lsls	r3, r3, #19
 8003ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d126      	bne.n	8003d20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	0148      	lsls	r0, r1, #5
 8003cec:	69f9      	ldr	r1, [r7, #28]
 8003cee:	4401      	add	r1, r0
 8003cf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	0151      	lsls	r1, r2, #5
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d16:	6113      	str	r3, [r2, #16]
 8003d18:	e03a      	b.n	8003d90 <USB_EPStartXfer+0x3e4>
 8003d1a:	bf00      	nop
 8003d1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	8afa      	ldrh	r2, [r7, #22]
 8003d3c:	fb03 f202 	mul.w	r2, r3, r2
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	8afb      	ldrh	r3, [r7, #22]
 8003d54:	04d9      	lsls	r1, r3, #19
 8003d56:	4b38      	ldr	r3, [pc, #224]	; (8003e38 <USB_EPStartXfer+0x48c>)
 8003d58:	400b      	ands	r3, r1
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	0148      	lsls	r0, r1, #5
 8003d5e:	69f9      	ldr	r1, [r7, #28]
 8003d60:	4401      	add	r1, r0
 8003d62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	0148      	lsls	r0, r1, #5
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	4401      	add	r1, r0
 8003d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d10d      	bne.n	8003db2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	460a      	mov	r2, r1
 8003db0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	791b      	ldrb	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d128      	bne.n	8003e0c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d110      	bne.n	8003dec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00f      	b.n	8003e0c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	1ff80000 	.word	0x1ff80000

08003e3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 80ce 	bne.w	8003ffa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d132      	bne.n	8003ecc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	0151      	lsls	r1, r2, #5
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec4:	0cdb      	lsrs	r3, r3, #19
 8003ec6:	04db      	lsls	r3, r3, #19
 8003ec8:	6113      	str	r3, [r2, #16]
 8003eca:	e04e      	b.n	8003f6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	0cdb      	lsrs	r3, r3, #19
 8003ee8:	04db      	lsls	r3, r3, #19
 8003eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d903      	bls.n	8003f24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5a:	6939      	ldr	r1, [r7, #16]
 8003f5c:	0148      	lsls	r0, r1, #5
 8003f5e:	6979      	ldr	r1, [r7, #20]
 8003f60:	4401      	add	r1, r0
 8003f62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f66:	4313      	orrs	r3, r2
 8003f68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d11e      	bne.n	8003fae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e097      	b.n	80040de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8083 	beq.w	80040de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	634b      	str	r3, [r1, #52]	; 0x34
 8003ff8:	e071      	b.n	80040de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004014:	0cdb      	lsrs	r3, r3, #19
 8004016:	04db      	lsls	r3, r3, #19
 8004018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	440a      	add	r2, r1
 8004030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800403c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	440a      	add	r2, r1
 800406c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004070:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	6939      	ldr	r1, [r7, #16]
 800408e:	0148      	lsls	r0, r1, #5
 8004090:	6979      	ldr	r1, [r7, #20]
 8004092:	4401      	add	r1, r0
 8004094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10d      	bne.n	80040be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	460a      	mov	r2, r1
 80040bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d14a      	bne.n	80041a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800411e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004122:	f040 8086 	bne.w	8004232 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004148:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	7812      	ldrb	r2, [r2, #0]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	440a      	add	r2, r1
 8004164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800416c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f242 7210 	movw	r2, #10000	; 0x2710
 800417a:	4293      	cmp	r3, r2
 800417c:	d902      	bls.n	8004184 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
          break;
 8004182:	e056      	b.n	8004232 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419c:	d0e7      	beq.n	800416e <USB_EPStopXfer+0x82>
 800419e:	e048      	b.n	8004232 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b8:	d13b      	bne.n	8004232 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004200:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3301      	adds	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f242 7210 	movw	r2, #10000	; 0x2710
 800420e:	4293      	cmp	r3, r2
 8004210:	d902      	bls.n	8004218 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
          break;
 8004216:	e00c      	b.n	8004232 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800422c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004230:	d0e7      	beq.n	8004202 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	460b      	mov	r3, r1
 8004250:	71fb      	strb	r3, [r7, #7]
 8004252:	4613      	mov	r3, r2
 8004254:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800425e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d123      	bne.n	80042ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004266:	88bb      	ldrh	r3, [r7, #4]
 8004268:	3303      	adds	r3, #3
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e018      	b.n	80042a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	031a      	lsls	r2, r3, #12
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004280:	461a      	mov	r2, r3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3301      	adds	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3301      	adds	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3e2      	bcc.n	8004274 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3724      	adds	r7, #36	; 0x24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042bc:	b480      	push	{r7}
 80042be:	b08b      	sub	sp, #44	; 0x2c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]
 80042e6:	e014      	b.n	8004312 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	3301      	adds	r3, #1
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	3301      	adds	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	3301      	adds	r3, #1
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	3301      	adds	r3, #1
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	3301      	adds	r3, #1
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	6a3a      	ldr	r2, [r7, #32]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	429a      	cmp	r2, r3
 8004318:	d3e6      	bcc.n	80042e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800431a:	8bfb      	ldrh	r3, [r7, #30]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01e      	beq.n	800435e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	461a      	mov	r2, r3
 800432c:	f107 0310 	add.w	r3, r7, #16
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	b2da      	uxtb	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	701a      	strb	r2, [r3, #0]
      i++;
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	3301      	adds	r3, #1
 800434a:	623b      	str	r3, [r7, #32]
      pDest++;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	3301      	adds	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004352:	8bfb      	ldrh	r3, [r7, #30]
 8004354:	3b01      	subs	r3, #1
 8004356:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004358:	8bfb      	ldrh	r3, [r7, #30]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ea      	bne.n	8004334 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004360:	4618      	mov	r0, r3
 8004362:	372c      	adds	r7, #44	; 0x2c
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d12c      	bne.n	80043e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db12      	blt.n	80043c0 <USB_EPSetStall+0x54>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00f      	beq.n	80043c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e02b      	b.n	800443a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db12      	blt.n	800441a <USB_EPSetStall+0xae>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00f      	beq.n	800441a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004414:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004418:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004438:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d128      	bne.n	80044b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004482:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d003      	beq.n	8004494 <USB_EPClearStall+0x4c>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	791b      	ldrb	r3, [r3, #4]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d138      	bne.n	8004506 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e027      	b.n	8004506 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	791b      	ldrb	r3, [r3, #4]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d003      	beq.n	80044e6 <USB_EPClearStall+0x9e>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	791b      	ldrb	r3, [r3, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d10f      	bne.n	8004506 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004532:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004536:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458e:	f023 0302 	bic.w	r3, r3, #2
 8004592:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045bc:	f023 0303 	bic.w	r3, r3, #3
 80045c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045fc:	68fb      	ldr	r3, [r7, #12]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	0c1b      	lsrs	r3, r3, #16
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	b29b      	uxth	r3, r3
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4013      	ands	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80046a0:	68bb      	ldr	r3, [r7, #8]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80046fc:	68bb      	ldr	r3, [r7, #8]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0301 	and.w	r3, r3, #1
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004740:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	460b      	mov	r3, r1
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	333c      	adds	r3, #60	; 0x3c
 8004782:	3304      	adds	r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4a26      	ldr	r2, [pc, #152]	; (8004824 <USB_EP0_OutStart+0xb8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d90a      	bls.n	80047a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800479c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a0:	d101      	bne.n	80047a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e037      	b.n	8004816 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d4:	f043 0318 	orr.w	r3, r3, #24
 80047d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80047ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10f      	bne.n	8004814 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	461a      	mov	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004812:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	4f54300a 	.word	0x4f54300a

08004828 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a13      	ldr	r2, [pc, #76]	; (800488c <USB_CoreReset+0x64>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e01b      	b.n	800487e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	daf2      	bge.n	8004834 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <USB_CoreReset+0x64>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d0f0      	beq.n	800485e <USB_CoreReset+0x36>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	00030d40 	.word	0x00030d40

08004890 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800489c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80048a0:	f002 fcaa 	bl	80071f8 <USBD_static_malloc>
 80048a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	32b0      	adds	r2, #176	; 0xb0
 80048b6:	2100      	movs	r1, #0
 80048b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80048bc:	2302      	movs	r3, #2
 80048be:	e0d4      	b.n	8004a6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80048c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80048c4:	2100      	movs	r1, #0
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f002 fd12 	bl	80072f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	32b0      	adds	r2, #176	; 0xb0
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	32b0      	adds	r2, #176	; 0xb0
 80048e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7c1b      	ldrb	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d138      	bne.n	800496a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80048f8:	4b5e      	ldr	r3, [pc, #376]	; (8004a74 <USBD_CDC_Init+0x1e4>)
 80048fa:	7819      	ldrb	r1, [r3, #0]
 80048fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004900:	2202      	movs	r2, #2
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f002 fb55 	bl	8006fb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004908:	4b5a      	ldr	r3, [pc, #360]	; (8004a74 <USBD_CDC_Init+0x1e4>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f003 020f 	and.w	r2, r3, #15
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	3324      	adds	r3, #36	; 0x24
 800491e:	2201      	movs	r2, #1
 8004920:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004922:	4b55      	ldr	r3, [pc, #340]	; (8004a78 <USBD_CDC_Init+0x1e8>)
 8004924:	7819      	ldrb	r1, [r3, #0]
 8004926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800492a:	2202      	movs	r2, #2
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f002 fb40 	bl	8006fb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004932:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <USBD_CDC_Init+0x1e8>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f003 020f 	and.w	r2, r3, #15
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800494a:	2201      	movs	r2, #1
 800494c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800494e:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <USBD_CDC_Init+0x1ec>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f003 020f 	and.w	r2, r3, #15
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	3326      	adds	r3, #38	; 0x26
 8004964:	2210      	movs	r2, #16
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	e035      	b.n	80049d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800496a:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <USBD_CDC_Init+0x1e4>)
 800496c:	7819      	ldrb	r1, [r3, #0]
 800496e:	2340      	movs	r3, #64	; 0x40
 8004970:	2202      	movs	r2, #2
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f002 fb1d 	bl	8006fb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004978:	4b3e      	ldr	r3, [pc, #248]	; (8004a74 <USBD_CDC_Init+0x1e4>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3324      	adds	r3, #36	; 0x24
 800498e:	2201      	movs	r2, #1
 8004990:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004992:	4b39      	ldr	r3, [pc, #228]	; (8004a78 <USBD_CDC_Init+0x1e8>)
 8004994:	7819      	ldrb	r1, [r3, #0]
 8004996:	2340      	movs	r3, #64	; 0x40
 8004998:	2202      	movs	r2, #2
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f002 fb09 	bl	8006fb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80049a0:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <USBD_CDC_Init+0x1e8>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f003 020f 	and.w	r2, r3, #15
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80049b8:	2201      	movs	r2, #1
 80049ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80049bc:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <USBD_CDC_Init+0x1ec>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f003 020f 	and.w	r2, r3, #15
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3326      	adds	r3, #38	; 0x26
 80049d2:	2210      	movs	r2, #16
 80049d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <USBD_CDC_Init+0x1ec>)
 80049d8:	7819      	ldrb	r1, [r3, #0]
 80049da:	2308      	movs	r3, #8
 80049dc:	2203      	movs	r2, #3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f002 fae7 	bl	8006fb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <USBD_CDC_Init+0x1ec>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3324      	adds	r3, #36	; 0x24
 80049fa:	2201      	movs	r2, #1
 80049fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	33b0      	adds	r3, #176	; 0xb0
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004a34:	2302      	movs	r3, #2
 8004a36:	e018      	b.n	8004a6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7c1b      	ldrb	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <USBD_CDC_Init+0x1e8>)
 8004a42:	7819      	ldrb	r1, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f002 fb9e 	bl	8007190 <USBD_LL_PrepareReceive>
 8004a54:	e008      	b.n	8004a68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <USBD_CDC_Init+0x1e8>)
 8004a58:	7819      	ldrb	r1, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f002 fb94 	bl	8007190 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000093 	.word	0x20000093
 8004a78:	20000094 	.word	0x20000094
 8004a7c:	20000095 	.word	0x20000095

08004a80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004a8c:	4b3a      	ldr	r3, [pc, #232]	; (8004b78 <USBD_CDC_DeInit+0xf8>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f002 fab3 	bl	8006ffe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004a98:	4b37      	ldr	r3, [pc, #220]	; (8004b78 <USBD_CDC_DeInit+0xf8>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 020f 	and.w	r2, r3, #15
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3324      	adds	r3, #36	; 0x24
 8004aae:	2200      	movs	r2, #0
 8004ab0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004ab2:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <USBD_CDC_DeInit+0xfc>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f002 faa0 	bl	8006ffe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004abe:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <USBD_CDC_DeInit+0xfc>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	f003 020f 	and.w	r2, r3, #15
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004ada:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <USBD_CDC_DeInit+0x100>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f002 fa8c 	bl	8006ffe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <USBD_CDC_DeInit+0x100>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	2200      	movs	r2, #0
 8004afe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004b00:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <USBD_CDC_DeInit+0x100>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f003 020f 	and.w	r2, r3, #15
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	3326      	adds	r3, #38	; 0x26
 8004b16:	2200      	movs	r2, #0
 8004b18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	32b0      	adds	r2, #176	; 0xb0
 8004b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01f      	beq.n	8004b6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	33b0      	adds	r3, #176	; 0xb0
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	32b0      	adds	r2, #176	; 0xb0
 8004b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 fb60 	bl	8007214 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	32b0      	adds	r2, #176	; 0xb0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000093 	.word	0x20000093
 8004b7c:	20000094 	.word	0x20000094
 8004b80:	20000095 	.word	0x20000095

08004b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	32b0      	adds	r2, #176	; 0xb0
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0bf      	b.n	8004d34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d050      	beq.n	8004c62 <USBD_CDC_Setup+0xde>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f040 80af 	bne.w	8004d24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	88db      	ldrh	r3, [r3, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d03a      	beq.n	8004c44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	b25b      	sxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da1b      	bge.n	8004c10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	33b0      	adds	r3, #176	; 0xb0
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004bee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	88d2      	ldrh	r2, [r2, #6]
 8004bf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	88db      	ldrh	r3, [r3, #6]
 8004bfa:	2b07      	cmp	r3, #7
 8004bfc:	bf28      	it	cs
 8004bfe:	2307      	movcs	r3, #7
 8004c00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	89fa      	ldrh	r2, [r7, #14]
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 fd89 	bl	8006720 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004c0e:	e090      	b.n	8004d32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	785a      	ldrb	r2, [r3, #1]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	2b3f      	cmp	r3, #63	; 0x3f
 8004c20:	d803      	bhi.n	8004c2a <USBD_CDC_Setup+0xa6>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	88db      	ldrh	r3, [r3, #6]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	e000      	b.n	8004c2c <USBD_CDC_Setup+0xa8>
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004c32:	6939      	ldr	r1, [r7, #16]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f001 fd9b 	bl	8006778 <USBD_CtlPrepareRx>
      break;
 8004c42:	e076      	b.n	8004d32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	33b0      	adds	r3, #176	; 0xb0
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	7850      	ldrb	r0, [r2, #1]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4798      	blx	r3
      break;
 8004c60:	e067      	b.n	8004d32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b0b      	cmp	r3, #11
 8004c68:	d851      	bhi.n	8004d0e <USBD_CDC_Setup+0x18a>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <USBD_CDC_Setup+0xec>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004d1d 	.word	0x08004d1d
 8004c78:	08004d0f 	.word	0x08004d0f
 8004c7c:	08004d0f 	.word	0x08004d0f
 8004c80:	08004d0f 	.word	0x08004d0f
 8004c84:	08004d0f 	.word	0x08004d0f
 8004c88:	08004d0f 	.word	0x08004d0f
 8004c8c:	08004d0f 	.word	0x08004d0f
 8004c90:	08004d0f 	.word	0x08004d0f
 8004c94:	08004d0f 	.word	0x08004d0f
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004cf5 	.word	0x08004cf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d107      	bne.n	8004cbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004cac:	f107 030a 	add.w	r3, r7, #10
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 fd33 	bl	8006720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cba:	e032      	b.n	8004d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f001 fcbd 	bl	800663e <USBD_CtlError>
            ret = USBD_FAIL;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8004cc8:	e02b      	b.n	8004d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d107      	bne.n	8004ce6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004cd6:	f107 030d 	add.w	r3, r7, #13
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 fd1e 	bl	8006720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ce4:	e01d      	b.n	8004d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f001 fca8 	bl	800663e <USBD_CtlError>
            ret = USBD_FAIL;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8004cf2:	e016      	b.n	8004d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d00f      	beq.n	8004d20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fc9b 	bl	800663e <USBD_CtlError>
            ret = USBD_FAIL;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d0c:	e008      	b.n	8004d20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 fc94 	bl	800663e <USBD_CtlError>
          ret = USBD_FAIL;
 8004d16:	2303      	movs	r3, #3
 8004d18:	75fb      	strb	r3, [r7, #23]
          break;
 8004d1a:	e002      	b.n	8004d22 <USBD_CDC_Setup+0x19e>
          break;
 8004d1c:	bf00      	nop
 8004d1e:	e008      	b.n	8004d32 <USBD_CDC_Setup+0x1ae>
          break;
 8004d20:	bf00      	nop
      }
      break;
 8004d22:	e006      	b.n	8004d32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fc89 	bl	800663e <USBD_CtlError>
      ret = USBD_FAIL;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	32b0      	adds	r2, #176	; 0xb0
 8004d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e065      	b.n	8004e32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	32b0      	adds	r2, #176	; 0xb0
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3318      	adds	r3, #24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02f      	beq.n	8004df0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	f003 020f 	and.w	r2, r3, #15
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3318      	adds	r3, #24
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 010f 	and.w	r1, r3, #15
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	460b      	mov	r3, r1
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	440b      	add	r3, r1
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4403      	add	r3, r0
 8004db8:	3348      	adds	r3, #72	; 0x48
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d112      	bne.n	8004df0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3318      	adds	r3, #24
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004de2:	78f9      	ldrb	r1, [r7, #3]
 8004de4:	2300      	movs	r3, #0
 8004de6:	2200      	movs	r2, #0
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f002 f9b0 	bl	800714e <USBD_LL_Transmit>
 8004dee:	e01f      	b.n	8004e30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	33b0      	adds	r3, #176	; 0xb0
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	33b0      	adds	r3, #176	; 0xb0
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	32b0      	adds	r2, #176	; 0xb0
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	32b0      	adds	r2, #176	; 0xb0
 8004e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e01a      	b.n	8004ea2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f002 f9ae 	bl	80071d2 <USBD_LL_GetRxDataSize>
 8004e76:	4602      	mov	r2, r0
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	33b0      	adds	r3, #176	; 0xb0
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	32b0      	adds	r2, #176	; 0xb0
 8004ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e025      	b.n	8004f18 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	33b0      	adds	r3, #176	; 0xb0
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01a      	beq.n	8004f16 <USBD_CDC_EP0_RxReady+0x6c>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ee6:	2bff      	cmp	r3, #255	; 0xff
 8004ee8:	d015      	beq.n	8004f16 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	33b0      	adds	r3, #176	; 0xb0
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004f02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	22ff      	movs	r2, #255	; 0xff
 8004f12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f28:	2182      	movs	r1, #130	; 0x82
 8004f2a:	4818      	ldr	r0, [pc, #96]	; (8004f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004f2c:	f000 fd4f 	bl	80059ce <USBD_GetEpDesc>
 8004f30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f32:	2101      	movs	r1, #1
 8004f34:	4815      	ldr	r0, [pc, #84]	; (8004f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004f36:	f000 fd4a 	bl	80059ce <USBD_GetEpDesc>
 8004f3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f3c:	2181      	movs	r1, #129	; 0x81
 8004f3e:	4813      	ldr	r0, [pc, #76]	; (8004f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004f40:	f000 fd45 	bl	80059ce <USBD_GetEpDesc>
 8004f44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2210      	movs	r2, #16
 8004f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f60:	711a      	strb	r2, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d006      	beq.n	8004f7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f74:	711a      	strb	r2, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2243      	movs	r2, #67	; 0x43
 8004f7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000050 	.word	0x20000050

08004f90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f98:	2182      	movs	r1, #130	; 0x82
 8004f9a:	4818      	ldr	r0, [pc, #96]	; (8004ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f9c:	f000 fd17 	bl	80059ce <USBD_GetEpDesc>
 8004fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4815      	ldr	r0, [pc, #84]	; (8004ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004fa6:	f000 fd12 	bl	80059ce <USBD_GetEpDesc>
 8004faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004fac:	2181      	movs	r1, #129	; 0x81
 8004fae:	4813      	ldr	r0, [pc, #76]	; (8004ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004fb0:	f000 fd0d 	bl	80059ce <USBD_GetEpDesc>
 8004fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	711a      	strb	r2, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f042 0202 	orr.w	r2, r2, #2
 8004fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	711a      	strb	r2, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f042 0202 	orr.w	r2, r2, #2
 8004fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2243      	movs	r2, #67	; 0x43
 8004fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ff0:	4b02      	ldr	r3, [pc, #8]	; (8004ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000050 	.word	0x20000050

08005000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005008:	2182      	movs	r1, #130	; 0x82
 800500a:	4818      	ldr	r0, [pc, #96]	; (800506c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800500c:	f000 fcdf 	bl	80059ce <USBD_GetEpDesc>
 8005010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005012:	2101      	movs	r1, #1
 8005014:	4815      	ldr	r0, [pc, #84]	; (800506c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005016:	f000 fcda 	bl	80059ce <USBD_GetEpDesc>
 800501a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800501c:	2181      	movs	r1, #129	; 0x81
 800501e:	4813      	ldr	r0, [pc, #76]	; (800506c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005020:	f000 fcd5 	bl	80059ce <USBD_GetEpDesc>
 8005024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2210      	movs	r2, #16
 8005030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d006      	beq.n	8005046 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2200      	movs	r2, #0
 800503c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005040:	711a      	strb	r2, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d006      	beq.n	800505a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005054:	711a      	strb	r2, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2243      	movs	r2, #67	; 0x43
 800505e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000050 	.word	0x20000050

08005070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	220a      	movs	r2, #10
 800507c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800507e:	4b03      	ldr	r3, [pc, #12]	; (800508c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	2000000c 	.word	0x2000000c

08005090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e009      	b.n	80050b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	33b0      	adds	r3, #176	; 0xb0
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	32b0      	adds	r2, #176	; 0xb0
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e008      	b.n	80050fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	32b0      	adds	r2, #176	; 0xb0
 800511c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005128:	2303      	movs	r3, #3
 800512a:	e004      	b.n	8005136 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	32b0      	adds	r2, #176	; 0xb0
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	32b0      	adds	r2, #176	; 0xb0
 800516a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005172:	2303      	movs	r3, #3
 8005174:	e025      	b.n	80051c2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800517c:	2b00      	cmp	r3, #0
 800517e:	d11f      	bne.n	80051c0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2201      	movs	r2, #1
 8005184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <USBD_CDC_TransmitPacket+0x88>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4403      	add	r3, r0
 80051a2:	3318      	adds	r3, #24
 80051a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <USBD_CDC_TransmitPacket+0x88>)
 80051a8:	7819      	ldrb	r1, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 ffc9 	bl	800714e <USBD_LL_Transmit>

    ret = USBD_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000093 	.word	0x20000093

080051d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	32b0      	adds	r2, #176	; 0xb0
 80051e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	32b0      	adds	r2, #176	; 0xb0
 80051f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e018      	b.n	8005230 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7c1b      	ldrb	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <USBD_CDC_ReceivePacket+0x68>)
 8005208:	7819      	ldrb	r1, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 ffbb 	bl	8007190 <USBD_LL_PrepareReceive>
 800521a:	e008      	b.n	800522e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <USBD_CDC_ReceivePacket+0x68>)
 800521e:	7819      	ldrb	r1, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005226:	2340      	movs	r3, #64	; 0x40
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f001 ffb1 	bl	8007190 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000094 	.word	0x20000094

0800523c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005250:	2303      	movs	r3, #3
 8005252:	e01f      	b.n	8005294 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	79fa      	ldrb	r2, [r7, #7]
 8005286:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f001 fe2b 	bl	8006ee4 <USBD_LL_Init>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e025      	b.n	8005300 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32ae      	adds	r2, #174	; 0xae
 80052c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	32ae      	adds	r2, #174	; 0xae
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f107 020e 	add.w	r2, r7, #14
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 fe33 	bl	8006f7c <USBD_LL_Start>
 8005316:	4603      	mov	r3, r0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005328:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	4611      	mov	r1, r2
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	4611      	mov	r1, r2
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005394:	2303      	movs	r3, #3
 8005396:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 f908 	bl	80065ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d01a      	beq.n	8005414 <USBD_LL_SetupStage+0x72>
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d822      	bhi.n	8005428 <USBD_LL_SetupStage+0x86>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <USBD_LL_SetupStage+0x4a>
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d00a      	beq.n	8005400 <USBD_LL_SetupStage+0x5e>
 80053ea:	e01d      	b.n	8005428 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fb5f 	bl	8005ab8 <USBD_StdDevReq>
 80053fa:	4603      	mov	r3, r0
 80053fc:	73fb      	strb	r3, [r7, #15]
      break;
 80053fe:	e020      	b.n	8005442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fbc7 	bl	8005b9c <USBD_StdItfReq>
 800540e:	4603      	mov	r3, r0
 8005410:	73fb      	strb	r3, [r7, #15]
      break;
 8005412:	e016      	b.n	8005442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fc29 	bl	8005c74 <USBD_StdEPReq>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]
      break;
 8005426:	e00c      	b.n	8005442 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800542e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fe00 	bl	800703c <USBD_LL_StallEP>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	bf00      	nop
  }

  return ret;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	460b      	mov	r3, r1
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d16e      	bne.n	8005542 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800546a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005472:	2b03      	cmp	r3, #3
 8005474:	f040 8098 	bne.w	80055a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d913      	bls.n	80054ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4293      	cmp	r3, r2
 800549c:	bf28      	it	cs
 800549e:	4613      	movcs	r3, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f001 f984 	bl	80067b2 <USBD_CtlContinueRx>
 80054aa:	e07d      	b.n	80055a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d014      	beq.n	80054e4 <USBD_LL_DataOutStage+0x98>
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d81d      	bhi.n	80054fa <USBD_LL_DataOutStage+0xae>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <USBD_LL_DataOutStage+0x7c>
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d003      	beq.n	80054ce <USBD_LL_DataOutStage+0x82>
 80054c6:	e018      	b.n	80054fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75bb      	strb	r3, [r7, #22]
            break;
 80054cc:	e018      	b.n	8005500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fa5e 	bl	800599a <USBD_CoreFindIF>
 80054de:	4603      	mov	r3, r0
 80054e0:	75bb      	strb	r3, [r7, #22]
            break;
 80054e2:	e00d      	b.n	8005500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa60 	bl	80059b4 <USBD_CoreFindEP>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75bb      	strb	r3, [r7, #22]
            break;
 80054f8:	e002      	b.n	8005500 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75bb      	strb	r3, [r7, #22]
            break;
 80054fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005500:	7dbb      	ldrb	r3, [r7, #22]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d119      	bne.n	800553a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d113      	bne.n	800553a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005512:	7dba      	ldrb	r2, [r7, #22]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	32ae      	adds	r2, #174	; 0xae
 8005518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005522:	7dba      	ldrb	r2, [r7, #22]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800552a:	7dba      	ldrb	r2, [r7, #22]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	32ae      	adds	r2, #174	; 0xae
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f001 f94a 	bl	80067d4 <USBD_CtlSendStatus>
 8005540:	e032      	b.n	80055a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005542:	7afb      	ldrb	r3, [r7, #11]
 8005544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	4619      	mov	r1, r3
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fa31 	bl	80059b4 <USBD_CoreFindEP>
 8005552:	4603      	mov	r3, r0
 8005554:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005556:	7dbb      	ldrb	r3, [r7, #22]
 8005558:	2bff      	cmp	r3, #255	; 0xff
 800555a:	d025      	beq.n	80055a8 <USBD_LL_DataOutStage+0x15c>
 800555c:	7dbb      	ldrb	r3, [r7, #22]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d122      	bne.n	80055a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d117      	bne.n	800559e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800556e:	7dba      	ldrb	r2, [r7, #22]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	32ae      	adds	r2, #174	; 0xae
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00f      	beq.n	800559e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800557e:	7dba      	ldrb	r2, [r7, #22]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005586:	7dba      	ldrb	r2, [r7, #22]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	32ae      	adds	r2, #174	; 0xae
 800558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	7afa      	ldrb	r2, [r7, #11]
 8005594:	4611      	mov	r1, r2
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	4798      	blx	r3
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	e000      	b.n	80055aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	460b      	mov	r3, r1
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d16f      	bne.n	80056a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3314      	adds	r3, #20
 80055ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d15a      	bne.n	800568c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d914      	bls.n	800560c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	1ad2      	subs	r2, r2, r3
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 f8ac 	bl	8006756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055fe:	2300      	movs	r3, #0
 8005600:	2200      	movs	r2, #0
 8005602:	2100      	movs	r1, #0
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f001 fdc3 	bl	8007190 <USBD_LL_PrepareReceive>
 800560a:	e03f      	b.n	800568c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d11c      	bne.n	8005652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005620:	429a      	cmp	r2, r3
 8005622:	d316      	bcc.n	8005652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800562e:	429a      	cmp	r2, r3
 8005630:	d20f      	bcs.n	8005652 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f001 f88d 	bl	8006756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005644:	2300      	movs	r3, #0
 8005646:	2200      	movs	r2, #0
 8005648:	2100      	movs	r1, #0
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f001 fda0 	bl	8007190 <USBD_LL_PrepareReceive>
 8005650:	e01c      	b.n	800568c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d10f      	bne.n	800567e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f001 fcdb 	bl	800703c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f001 f8b7 	bl	80067fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03a      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fe42 	bl	8005320 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056a4:	e032      	b.n	800570c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80056a6:	7afb      	ldrb	r3, [r7, #11]
 80056a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	4619      	mov	r1, r3
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f97f 	bl	80059b4 <USBD_CoreFindEP>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2bff      	cmp	r3, #255	; 0xff
 80056be:	d025      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d122      	bne.n	800570c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d11c      	bne.n	800570c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80056d2:	7dfa      	ldrb	r2, [r7, #23]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	32ae      	adds	r2, #174	; 0xae
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80056e2:	7dfa      	ldrb	r2, [r7, #23]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80056ea:	7dfa      	ldrb	r2, [r7, #23]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	32ae      	adds	r2, #174	; 0xae
 80056f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	7afa      	ldrb	r2, [r7, #11]
 80056f8:	4611      	mov	r1, r2
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	4798      	blx	r3
 80056fe:	4603      	mov	r3, r0
 8005700:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005702:	7dbb      	ldrb	r3, [r7, #22]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005708:	7dbb      	ldrb	r3, [r7, #22]
 800570a:	e000      	b.n	800570e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6852      	ldr	r2, [r2, #4]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	4611      	mov	r1, r2
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005778:	2303      	movs	r3, #3
 800577a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	2200      	movs	r2, #0
 8005780:	2100      	movs	r1, #0
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fc15 	bl	8006fb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	2200      	movs	r2, #0
 800579c:	2180      	movs	r1, #128	; 0x80
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f001 fc07 	bl	8006fb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	621a      	str	r2, [r3, #32]

  return ret;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b04      	cmp	r3, #4
 8005818:	d106      	bne.n	8005828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005820:	b2da      	uxtb	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d110      	bne.n	800586c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	32ae      	adds	r2, #174	; 0xae
 800588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005894:	2303      	movs	r3, #3
 8005896:	e01c      	b.n	80058d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d115      	bne.n	80058d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	32ae      	adds	r2, #174	; 0xae
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	32ae      	adds	r2, #174	; 0xae
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	78fa      	ldrb	r2, [r7, #3]
 80058ca:	4611      	mov	r1, r2
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	32ae      	adds	r2, #174	; 0xae
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e01c      	b.n	8005936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b03      	cmp	r3, #3
 8005906:	d115      	bne.n	8005934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	32ae      	adds	r2, #174	; 0xae
 8005912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	32ae      	adds	r2, #174	; 0xae
 8005926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	4611      	mov	r1, r2
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6852      	ldr	r2, [r2, #4]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	4611      	mov	r1, r2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80059a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80059c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	460b      	mov	r3, r1
 80059d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	885b      	ldrh	r3, [r3, #2]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d920      	bls.n	8005a38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80059fe:	e013      	b.n	8005a28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005a00:	f107 030a 	add.w	r3, r7, #10
 8005a04:	4619      	mov	r1, r3
 8005a06:	6978      	ldr	r0, [r7, #20]
 8005a08:	f000 f81b 	bl	8005a42 <USBD_GetNextDesc>
 8005a0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d108      	bne.n	8005a28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	789b      	ldrb	r3, [r3, #2]
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d008      	beq.n	8005a36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	885b      	ldrh	r3, [r3, #2]
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d8e5      	bhi.n	8005a00 <USBD_GetEpDesc+0x32>
 8005a34:	e000      	b.n	8005a38 <USBD_GetEpDesc+0x6a>
          break;
 8005a36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005a38:	693b      	ldr	r3, [r7, #16]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	3301      	adds	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a9a:	8a3b      	ldrh	r3, [r7, #16]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	b21a      	sxth	r2, r3
 8005aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d005      	beq.n	8005ade <USBD_StdDevReq+0x26>
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d857      	bhi.n	8005b86 <USBD_StdDevReq+0xce>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <USBD_StdDevReq+0x42>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d153      	bne.n	8005b86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	32ae      	adds	r2, #174	; 0xae
 8005ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e04a      	b.n	8005b90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d83b      	bhi.n	8005b7a <USBD_StdDevReq+0xc2>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <USBD_StdDevReq+0x50>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b7b 	.word	0x08005b7b
 8005b14:	08005b67 	.word	0x08005b67
 8005b18:	08005b7b 	.word	0x08005b7b
 8005b1c:	08005b3b 	.word	0x08005b3b
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b7b 	.word	0x08005b7b
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b45 	.word	0x08005b45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa3c 	bl	8005fb0 <USBD_GetDescriptor>
          break;
 8005b38:	e024      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fba1 	bl	8006284 <USBD_SetAddress>
          break;
 8005b42:	e01f      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fbe0 	bl	800630c <USBD_SetConfig>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8005b50:	e018      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fc83 	bl	8006460 <USBD_GetConfig>
          break;
 8005b5a:	e013      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fcb4 	bl	80064cc <USBD_GetStatus>
          break;
 8005b64:	e00e      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fce3 	bl	8006534 <USBD_SetFeature>
          break;
 8005b6e:	e009      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fd07 	bl	8006586 <USBD_ClrFeature>
          break;
 8005b78:	e004      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fd5e 	bl	800663e <USBD_CtlError>
          break;
 8005b82:	bf00      	nop
      }
      break;
 8005b84:	e004      	b.n	8005b90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fd58 	bl	800663e <USBD_CtlError>
      break;
 8005b8e:	bf00      	nop
  }

  return ret;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop

08005b9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d005      	beq.n	8005bc2 <USBD_StdItfReq+0x26>
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d852      	bhi.n	8005c60 <USBD_StdItfReq+0xc4>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <USBD_StdItfReq+0x26>
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d14e      	bne.n	8005c60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d840      	bhi.n	8005c52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	889b      	ldrh	r3, [r3, #4]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d836      	bhi.n	8005c48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	889b      	ldrh	r3, [r3, #4]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fed9 	bl	800599a <USBD_CoreFindIF>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2bff      	cmp	r3, #255	; 0xff
 8005bf0:	d01d      	beq.n	8005c2e <USBD_StdItfReq+0x92>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005bf8:	7bba      	ldrb	r2, [r7, #14]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	32ae      	adds	r2, #174	; 0xae
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005c08:	7bba      	ldrb	r2, [r7, #14]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c10:	7bba      	ldrb	r2, [r7, #14]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	32ae      	adds	r2, #174	; 0xae
 8005c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005c26:	e004      	b.n	8005c32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005c2c:	e001      	b.n	8005c32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	88db      	ldrh	r3, [r3, #6]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d110      	bne.n	8005c5c <USBD_StdItfReq+0xc0>
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fdc7 	bl	80067d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c46:	e009      	b.n	8005c5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fcf7 	bl	800663e <USBD_CtlError>
          break;
 8005c50:	e004      	b.n	8005c5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fcf2 	bl	800663e <USBD_CtlError>
          break;
 8005c5a:	e000      	b.n	8005c5e <USBD_StdItfReq+0xc2>
          break;
 8005c5c:	bf00      	nop
      }
      break;
 8005c5e:	e004      	b.n	8005c6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fceb 	bl	800663e <USBD_CtlError>
      break;
 8005c68:	bf00      	nop
  }

  return ret;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	889b      	ldrh	r3, [r3, #4]
 8005c86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d007      	beq.n	8005ca4 <USBD_StdEPReq+0x30>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	f200 817f 	bhi.w	8005f98 <USBD_StdEPReq+0x324>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d02a      	beq.n	8005cf4 <USBD_StdEPReq+0x80>
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	f040 817a 	bne.w	8005f98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fe83 	bl	80059b4 <USBD_CoreFindEP>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cb2:	7b7b      	ldrb	r3, [r7, #13]
 8005cb4:	2bff      	cmp	r3, #255	; 0xff
 8005cb6:	f000 8174 	beq.w	8005fa2 <USBD_StdEPReq+0x32e>
 8005cba:	7b7b      	ldrb	r3, [r7, #13]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f040 8170 	bne.w	8005fa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005cc2:	7b7a      	ldrb	r2, [r7, #13]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005cca:	7b7a      	ldrb	r2, [r7, #13]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	32ae      	adds	r2, #174	; 0xae
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8163 	beq.w	8005fa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005cdc:	7b7a      	ldrb	r2, [r7, #13]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32ae      	adds	r2, #174	; 0xae
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cf2:	e156      	b.n	8005fa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d008      	beq.n	8005d0e <USBD_StdEPReq+0x9a>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	f300 8145 	bgt.w	8005f8c <USBD_StdEPReq+0x318>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 809b 	beq.w	8005e3e <USBD_StdEPReq+0x1ca>
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d03c      	beq.n	8005d86 <USBD_StdEPReq+0x112>
 8005d0c:	e13e      	b.n	8005f8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d002      	beq.n	8005d20 <USBD_StdEPReq+0xac>
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d016      	beq.n	8005d4c <USBD_StdEPReq+0xd8>
 8005d1e:	e02c      	b.n	8005d7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <USBD_StdEPReq+0xce>
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d00a      	beq.n	8005d42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d2c:	7bbb      	ldrb	r3, [r7, #14]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f983 	bl	800703c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f97f 	bl	800703c <USBD_LL_StallEP>
 8005d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d40:	e020      	b.n	8005d84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fc7a 	bl	800663e <USBD_CtlError>
              break;
 8005d4a:	e01b      	b.n	8005d84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	885b      	ldrh	r3, [r3, #2]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10e      	bne.n	8005d72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <USBD_StdEPReq+0xfe>
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	2b80      	cmp	r3, #128	; 0x80
 8005d5e:	d008      	beq.n	8005d72 <USBD_StdEPReq+0xfe>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	88db      	ldrh	r3, [r3, #6]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 f965 	bl	800703c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fd2e 	bl	80067d4 <USBD_CtlSendStatus>

              break;
 8005d78:	e004      	b.n	8005d84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fc5e 	bl	800663e <USBD_CtlError>
              break;
 8005d82:	bf00      	nop
          }
          break;
 8005d84:	e107      	b.n	8005f96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d002      	beq.n	8005d98 <USBD_StdEPReq+0x124>
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d016      	beq.n	8005dc4 <USBD_StdEPReq+0x150>
 8005d96:	e04b      	b.n	8005e30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <USBD_StdEPReq+0x146>
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d00a      	beq.n	8005dba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f947 	bl	800703c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f943 	bl	800703c <USBD_LL_StallEP>
 8005db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005db8:	e040      	b.n	8005e3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fc3e 	bl	800663e <USBD_CtlError>
              break;
 8005dc2:	e03b      	b.n	8005e3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	885b      	ldrh	r3, [r3, #2]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d136      	bne.n	8005e3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 f94d 	bl	800707a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fcf7 	bl	80067d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fde2 	bl	80059b4 <USBD_CoreFindEP>
 8005df0:	4603      	mov	r3, r0
 8005df2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005df4:	7b7b      	ldrb	r3, [r7, #13]
 8005df6:	2bff      	cmp	r3, #255	; 0xff
 8005df8:	d01f      	beq.n	8005e3a <USBD_StdEPReq+0x1c6>
 8005dfa:	7b7b      	ldrb	r3, [r7, #13]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11c      	bne.n	8005e3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005e00:	7b7a      	ldrb	r2, [r7, #13]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005e08:	7b7a      	ldrb	r2, [r7, #13]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	32ae      	adds	r2, #174	; 0xae
 8005e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e18:	7b7a      	ldrb	r2, [r7, #13]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32ae      	adds	r2, #174	; 0xae
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005e2e:	e004      	b.n	8005e3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fc03 	bl	800663e <USBD_CtlError>
              break;
 8005e38:	e000      	b.n	8005e3c <USBD_StdEPReq+0x1c8>
              break;
 8005e3a:	bf00      	nop
          }
          break;
 8005e3c:	e0ab      	b.n	8005f96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d002      	beq.n	8005e50 <USBD_StdEPReq+0x1dc>
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d032      	beq.n	8005eb4 <USBD_StdEPReq+0x240>
 8005e4e:	e097      	b.n	8005f80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <USBD_StdEPReq+0x1f2>
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b80      	cmp	r3, #128	; 0x80
 8005e5a:	d004      	beq.n	8005e66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fbed 	bl	800663e <USBD_CtlError>
                break;
 8005e64:	e091      	b.n	8005f8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da0b      	bge.n	8005e86 <USBD_StdEPReq+0x212>
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4413      	add	r3, r2
 8005e82:	3304      	adds	r3, #4
 8005e84:	e00b      	b.n	8005e9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc37 	bl	8006720 <USBD_CtlSendData>
              break;
 8005eb2:	e06a      	b.n	8005f8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da11      	bge.n	8005ee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d117      	bne.n	8005f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fbb0 	bl	800663e <USBD_CtlError>
                  break;
 8005ede:	e054      	b.n	8005f8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb9d 	bl	800663e <USBD_CtlError>
                  break;
 8005f04:	e041      	b.n	8005f8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da0b      	bge.n	8005f26 <USBD_StdEPReq+0x2b2>
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	3304      	adds	r3, #4
 8005f24:	e00b      	b.n	8005f3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <USBD_StdEPReq+0x2d8>
 8005f46:	7bbb      	ldrb	r3, [r7, #14]
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d103      	bne.n	8005f54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e00e      	b.n	8005f72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 f8ad 	bl	80070b8 <USBD_LL_IsStallEP>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e002      	b.n	8005f72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2202      	movs	r2, #2
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fbd1 	bl	8006720 <USBD_CtlSendData>
              break;
 8005f7e:	e004      	b.n	8005f8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb5b 	bl	800663e <USBD_CtlError>
              break;
 8005f88:	bf00      	nop
          }
          break;
 8005f8a:	e004      	b.n	8005f96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fb55 	bl	800663e <USBD_CtlError>
          break;
 8005f94:	bf00      	nop
      }
      break;
 8005f96:	e005      	b.n	8005fa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fb4f 	bl	800663e <USBD_CtlError>
      break;
 8005fa0:	e000      	b.n	8005fa4 <USBD_StdEPReq+0x330>
      break;
 8005fa2:	bf00      	nop
  }

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	885b      	ldrh	r3, [r3, #2]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	2b06      	cmp	r3, #6
 8005fd2:	f200 8128 	bhi.w	8006226 <USBD_GetDescriptor+0x276>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBD_GetDescriptor+0x2c>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	08006227 	.word	0x08006227
 8005fec:	08006227 	.word	0x08006227
 8005ff0:	080061c7 	.word	0x080061c7
 8005ff4:	080061f3 	.word	0x080061f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7c12      	ldrb	r2, [r2, #16]
 8006004:	f107 0108 	add.w	r1, r7, #8
 8006008:	4610      	mov	r0, r2
 800600a:	4798      	blx	r3
 800600c:	60f8      	str	r0, [r7, #12]
      break;
 800600e:	e112      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7c1b      	ldrb	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f107 0208 	add.w	r2, r7, #8
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	2202      	movs	r2, #2
 8006030:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006032:	e100      	b.n	8006236 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f107 0208 	add.w	r2, r7, #8
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e0f2      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b05      	cmp	r3, #5
 8006058:	f200 80ac 	bhi.w	80061b4 <USBD_GetDescriptor+0x204>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USBD_GetDescriptor+0xb4>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	0800607d 	.word	0x0800607d
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060e5 	.word	0x080060e5
 8006070:	08006119 	.word	0x08006119
 8006074:	0800614d 	.word	0x0800614d
 8006078:	08006181 	.word	0x08006181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e091      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 facb 	bl	800663e <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e089      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e077      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fab1 	bl	800663e <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e06f      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e05d      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa97 	bl	800663e <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e055      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e043      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa7d 	bl	800663e <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e03b      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e029      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa63 	bl	800663e <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e021      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061a2:	e00f      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa49 	bl	800663e <USBD_CtlError>
            err++;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	3301      	adds	r3, #1
 80061b0:	72fb      	strb	r3, [r7, #11]
          break;
 80061b2:	e007      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa41 	bl	800663e <USBD_CtlError>
          err++;
 80061bc:	7afb      	ldrb	r3, [r7, #11]
 80061be:	3301      	adds	r3, #1
 80061c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80061c2:	bf00      	nop
      }
      break;
 80061c4:	e037      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7c1b      	ldrb	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	f107 0208 	add.w	r2, r7, #8
 80061da:	4610      	mov	r0, r2
 80061dc:	4798      	blx	r3
 80061de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061e0:	e029      	b.n	8006236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa2a 	bl	800663e <USBD_CtlError>
        err++;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	3301      	adds	r3, #1
 80061ee:	72fb      	strb	r3, [r7, #11]
      break;
 80061f0:	e021      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7c1b      	ldrb	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f107 0208 	add.w	r2, r7, #8
 8006206:	4610      	mov	r0, r2
 8006208:	4798      	blx	r3
 800620a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	2207      	movs	r2, #7
 8006212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006214:	e00f      	b.n	8006236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa10 	bl	800663e <USBD_CtlError>
        err++;
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	3301      	adds	r3, #1
 8006222:	72fb      	strb	r3, [r7, #11]
      break;
 8006224:	e007      	b.n	8006236 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa08 	bl	800663e <USBD_CtlError>
      err++;
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	3301      	adds	r3, #1
 8006232:	72fb      	strb	r3, [r7, #11]
      break;
 8006234:	bf00      	nop
  }

  if (err != 0U)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11e      	bne.n	800627a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	88db      	ldrh	r3, [r3, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006244:	893b      	ldrh	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88da      	ldrh	r2, [r3, #6]
 800624e:	893b      	ldrh	r3, [r7, #8]
 8006250:	4293      	cmp	r3, r2
 8006252:	bf28      	it	cs
 8006254:	4613      	movcs	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800625a:	893b      	ldrh	r3, [r7, #8]
 800625c:	461a      	mov	r2, r3
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fa5d 	bl	8006720 <USBD_CtlSendData>
 8006266:	e009      	b.n	800627c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9e7 	bl	800663e <USBD_CtlError>
 8006270:	e004      	b.n	800627c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 faae 	bl	80067d4 <USBD_CtlSendStatus>
 8006278:	e000      	b.n	800627c <USBD_GetDescriptor+0x2cc>
    return;
 800627a:	bf00      	nop
  }
}
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop

08006284 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	889b      	ldrh	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d131      	bne.n	80062fa <USBD_SetAddress+0x76>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d12d      	bne.n	80062fa <USBD_SetAddress+0x76>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	885b      	ldrh	r3, [r3, #2]
 80062a2:	2b7f      	cmp	r3, #127	; 0x7f
 80062a4:	d829      	bhi.n	80062fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	885b      	ldrh	r3, [r3, #2]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d104      	bne.n	80062c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9bc 	bl	800663e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	e01d      	b.n	8006304 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7bfa      	ldrb	r2, [r7, #15]
 80062cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 ff1b 	bl	8007110 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa7a 	bl	80067d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ee:	e009      	b.n	8006304 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f8:	e004      	b.n	8006304 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f99e 	bl	800663e <USBD_CtlError>
  }
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	885b      	ldrh	r3, [r3, #2]
 800631e:	b2da      	uxtb	r2, r3
 8006320:	4b4e      	ldr	r3, [pc, #312]	; (800645c <USBD_SetConfig+0x150>)
 8006322:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006324:	4b4d      	ldr	r3, [pc, #308]	; (800645c <USBD_SetConfig+0x150>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d905      	bls.n	8006338 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f985 	bl	800663e <USBD_CtlError>
    return USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	e08c      	b.n	8006452 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d002      	beq.n	800634a <USBD_SetConfig+0x3e>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d029      	beq.n	800639c <USBD_SetConfig+0x90>
 8006348:	e075      	b.n	8006436 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <USBD_SetConfig+0x150>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d020      	beq.n	8006394 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006352:	4b42      	ldr	r3, [pc, #264]	; (800645c <USBD_SetConfig+0x150>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800635c:	4b3f      	ldr	r3, [pc, #252]	; (800645c <USBD_SetConfig+0x150>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fe ffe7 	bl	8005336 <USBD_SetClassConfig>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f962 	bl	800663e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006382:	e065      	b.n	8006450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa25 	bl	80067d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2203      	movs	r2, #3
 800638e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006392:	e05d      	b.n	8006450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa1d 	bl	80067d4 <USBD_CtlSendStatus>
      break;
 800639a:	e059      	b.n	8006450 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800639c:	4b2f      	ldr	r3, [pc, #188]	; (800645c <USBD_SetConfig+0x150>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d112      	bne.n	80063ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80063ac:	4b2b      	ldr	r3, [pc, #172]	; (800645c <USBD_SetConfig+0x150>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063b6:	4b29      	ldr	r3, [pc, #164]	; (800645c <USBD_SetConfig+0x150>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fe ffd6 	bl	800536e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa06 	bl	80067d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063c8:	e042      	b.n	8006450 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <USBD_SetConfig+0x150>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d02a      	beq.n	800642e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fe ffc4 	bl	800536e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <USBD_SetConfig+0x150>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <USBD_SetConfig+0x150>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fe ff9d 	bl	8005336 <USBD_SetClassConfig>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00f      	beq.n	8006426 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f918 	bl	800663e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fe ffa9 	bl	800536e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006424:	e014      	b.n	8006450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9d4 	bl	80067d4 <USBD_CtlSendStatus>
      break;
 800642c:	e010      	b.n	8006450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9d0 	bl	80067d4 <USBD_CtlSendStatus>
      break;
 8006434:	e00c      	b.n	8006450 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f900 	bl	800663e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <USBD_SetConfig+0x150>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe ff92 	bl	800536e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800644a:	2303      	movs	r3, #3
 800644c:	73fb      	strb	r3, [r7, #15]
      break;
 800644e:	bf00      	nop
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000208 	.word	0x20000208

08006460 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	88db      	ldrh	r3, [r3, #6]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d004      	beq.n	800647c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8e2 	bl	800663e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800647a:	e023      	b.n	80064c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	dc02      	bgt.n	800648e <USBD_GetConfig+0x2e>
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc03      	bgt.n	8006494 <USBD_GetConfig+0x34>
 800648c:	e015      	b.n	80064ba <USBD_GetConfig+0x5a>
 800648e:	2b03      	cmp	r3, #3
 8006490:	d00b      	beq.n	80064aa <USBD_GetConfig+0x4a>
 8006492:	e012      	b.n	80064ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3308      	adds	r3, #8
 800649e:	2201      	movs	r2, #1
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f93c 	bl	8006720 <USBD_CtlSendData>
        break;
 80064a8:	e00c      	b.n	80064c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	2201      	movs	r2, #1
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f934 	bl	8006720 <USBD_CtlSendData>
        break;
 80064b8:	e004      	b.n	80064c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8be 	bl	800663e <USBD_CtlError>
        break;
 80064c2:	bf00      	nop
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d81e      	bhi.n	8006522 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	88db      	ldrh	r3, [r3, #6]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d004      	beq.n	80064f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8a5 	bl	800663e <USBD_CtlError>
        break;
 80064f4:	e01a      	b.n	800652c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f043 0202 	orr.w	r2, r3, #2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	330c      	adds	r3, #12
 8006516:	2202      	movs	r2, #2
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f900 	bl	8006720 <USBD_CtlSendData>
      break;
 8006520:	e004      	b.n	800652c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f88a 	bl	800663e <USBD_CtlError>
      break;
 800652a:	bf00      	nop
  }
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f940 	bl	80067d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006554:	e013      	b.n	800657e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d10b      	bne.n	8006576 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	889b      	ldrh	r3, [r3, #4]
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	b29b      	uxth	r3, r3
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f930 	bl	80067d4 <USBD_CtlSendStatus>
}
 8006574:	e003      	b.n	800657e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f860 	bl	800663e <USBD_CtlError>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	2b02      	cmp	r3, #2
 800659c:	d80b      	bhi.n	80065b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	885b      	ldrh	r3, [r3, #2]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10c      	bne.n	80065c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f910 	bl	80067d4 <USBD_CtlSendStatus>
      }
      break;
 80065b4:	e004      	b.n	80065c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f840 	bl	800663e <USBD_CtlError>
      break;
 80065be:	e000      	b.n	80065c2 <USBD_ClrFeature+0x3c>
      break;
 80065c0:	bf00      	nop
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fa41 	bl	8005a7c <SWAPBYTE>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff fa34 	bl	8005a7c <SWAPBYTE>
 8006614:	4603      	mov	r3, r0
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff fa27 	bl	8005a7c <SWAPBYTE>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	80da      	strh	r2, [r3, #6]
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fcf6 	bl	800703c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006650:	2100      	movs	r1, #0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fcf2 	bl	800703c <USBD_LL_StallEP>
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d036      	beq.n	80066e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f000 f836 	bl	80066ec <USBD_GetLen>
 8006680:	4603      	mov	r3, r0
 8006682:	3301      	adds	r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	4413      	add	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	701a      	strb	r2, [r3, #0]
  idx++;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	3301      	adds	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4413      	add	r3, r2
 80066a6:	2203      	movs	r2, #3
 80066a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	3301      	adds	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80066b0:	e013      	b.n	80066da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4413      	add	r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
    idx++;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	3301      	adds	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	4413      	add	r3, r2
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	3301      	adds	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e7      	bne.n	80066b2 <USBD_GetString+0x52>
 80066e2:	e000      	b.n	80066e6 <USBD_GetString+0x86>
    return;
 80066e4:	bf00      	nop
  }
}
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066fc:	e005      	b.n	800670a <USBD_GetLen+0x1e>
  {
    len++;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	3301      	adds	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3301      	adds	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f5      	bne.n	80066fe <USBD_GetLen+0x12>
  }

  return len;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2202      	movs	r2, #2
 8006730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	2100      	movs	r1, #0
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fd01 	bl	800714e <USBD_LL_Transmit>

  return USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	2100      	movs	r1, #0
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fcf0 	bl	800714e <USBD_LL_Transmit>

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2203      	movs	r2, #3
 8006788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	2100      	movs	r1, #0
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fcf4 	bl	8007190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	2100      	movs	r1, #0
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fce3 	bl	8007190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2204      	movs	r2, #4
 80067e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067e4:	2300      	movs	r3, #0
 80067e6:	2200      	movs	r2, #0
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fcaf 	bl	800714e <USBD_LL_Transmit>

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2205      	movs	r2, #5
 8006806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800680a:	2300      	movs	r3, #0
 800680c:	2200      	movs	r2, #0
 800680e:	2100      	movs	r1, #0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fcbd 	bl	8007190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006824:	2200      	movs	r2, #0
 8006826:	4912      	ldr	r1, [pc, #72]	; (8006870 <MX_USB_DEVICE_Init+0x50>)
 8006828:	4812      	ldr	r0, [pc, #72]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800682a:	f7fe fd07 	bl	800523c <USBD_Init>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006834:	f7fa f83a 	bl	80008ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006838:	490f      	ldr	r1, [pc, #60]	; (8006878 <MX_USB_DEVICE_Init+0x58>)
 800683a:	480e      	ldr	r0, [pc, #56]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800683c:	f7fe fd2e 	bl	800529c <USBD_RegisterClass>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006846:	f7fa f831 	bl	80008ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800684a:	490c      	ldr	r1, [pc, #48]	; (800687c <MX_USB_DEVICE_Init+0x5c>)
 800684c:	4809      	ldr	r0, [pc, #36]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800684e:	f7fe fc1f 	bl	8005090 <USBD_CDC_RegisterInterface>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006858:	f7fa f828 	bl	80008ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800685c:	4805      	ldr	r0, [pc, #20]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800685e:	f7fe fd53 	bl	8005308 <USBD_Start>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006868:	f7fa f820 	bl	80008ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200000ac 	.word	0x200000ac
 8006874:	2000020c 	.word	0x2000020c
 8006878:	20000018 	.word	0x20000018
 800687c:	20000098 	.word	0x20000098

08006880 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006884:	2200      	movs	r2, #0
 8006886:	4905      	ldr	r1, [pc, #20]	; (800689c <CDC_Init_FS+0x1c>)
 8006888:	4805      	ldr	r0, [pc, #20]	; (80068a0 <CDC_Init_FS+0x20>)
 800688a:	f7fe fc1b 	bl	80050c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800688e:	4905      	ldr	r1, [pc, #20]	; (80068a4 <CDC_Init_FS+0x24>)
 8006890:	4803      	ldr	r0, [pc, #12]	; (80068a0 <CDC_Init_FS+0x20>)
 8006892:	f7fe fc39 	bl	8005108 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006896:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006898:	4618      	mov	r0, r3
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000ce8 	.word	0x20000ce8
 80068a0:	2000020c 	.word	0x2000020c
 80068a4:	200004e8 	.word	0x200004e8

080068a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80068ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	6039      	str	r1, [r7, #0]
 80068c2:	71fb      	strb	r3, [r7, #7]
 80068c4:	4613      	mov	r3, r2
 80068c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	2b23      	cmp	r3, #35	; 0x23
 80068cc:	d84a      	bhi.n	8006964 <CDC_Control_FS+0xac>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <CDC_Control_FS+0x1c>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	08006965 	.word	0x08006965
 80068d8:	08006965 	.word	0x08006965
 80068dc:	08006965 	.word	0x08006965
 80068e0:	08006965 	.word	0x08006965
 80068e4:	08006965 	.word	0x08006965
 80068e8:	08006965 	.word	0x08006965
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006965 	.word	0x08006965
 80068f4:	08006965 	.word	0x08006965
 80068f8:	08006965 	.word	0x08006965
 80068fc:	08006965 	.word	0x08006965
 8006900:	08006965 	.word	0x08006965
 8006904:	08006965 	.word	0x08006965
 8006908:	08006965 	.word	0x08006965
 800690c:	08006965 	.word	0x08006965
 8006910:	08006965 	.word	0x08006965
 8006914:	08006965 	.word	0x08006965
 8006918:	08006965 	.word	0x08006965
 800691c:	08006965 	.word	0x08006965
 8006920:	08006965 	.word	0x08006965
 8006924:	08006965 	.word	0x08006965
 8006928:	08006965 	.word	0x08006965
 800692c:	08006965 	.word	0x08006965
 8006930:	08006965 	.word	0x08006965
 8006934:	08006965 	.word	0x08006965
 8006938:	08006965 	.word	0x08006965
 800693c:	08006965 	.word	0x08006965
 8006940:	08006965 	.word	0x08006965
 8006944:	08006965 	.word	0x08006965
 8006948:	08006965 	.word	0x08006965
 800694c:	08006965 	.word	0x08006965
 8006950:	08006965 	.word	0x08006965
 8006954:	08006965 	.word	0x08006965
 8006958:	08006965 	.word	0x08006965
 800695c:	08006965 	.word	0x08006965
 8006960:	08006965 	.word	0x08006965
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006964:	bf00      	nop
  }

  return (USBD_OK);
 8006966:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	480f      	ldr	r0, [pc, #60]	; (80069c0 <CDC_Receive_FS+0x4c>)
 8006982:	f7fe fbc1 	bl	8005108 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006986:	480e      	ldr	r0, [pc, #56]	; (80069c0 <CDC_Receive_FS+0x4c>)
 8006988:	f7fe fc22 	bl	80051d0 <USBD_CDC_ReceivePacket>
	  memset (buffer, '\0', 64); // clear the buffer
 800698c:	2240      	movs	r2, #64	; 0x40
 800698e:	2100      	movs	r1, #0
 8006990:	480c      	ldr	r0, [pc, #48]	; (80069c4 <CDC_Receive_FS+0x50>)
 8006992:	f000 fcad 	bl	80072f0 <memset>
	  uint8_t len = (uint8_t) *Len;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len); // copy the data to the buffer
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	461a      	mov	r2, r3
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4808      	ldr	r0, [pc, #32]	; (80069c4 <CDC_Receive_FS+0x50>)
 80069a4:	f000 fc96 	bl	80072d4 <memcpy>
	  memset(Buf, '\0', len); // clear the Buf also
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	461a      	mov	r2, r3
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fc9e 	bl	80072f0 <memset>
	  return (USBD_OK);
 80069b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2000020c 	.word	0x2000020c
 80069c4:	2000017c 	.word	0x2000017c

080069c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <CDC_Transmit_FS+0x48>)
 80069da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e00b      	b.n	8006a06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80069ee:	887b      	ldrh	r3, [r7, #2]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4806      	ldr	r0, [pc, #24]	; (8006a10 <CDC_Transmit_FS+0x48>)
 80069f6:	f7fe fb65 	bl	80050c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80069fa:	4805      	ldr	r0, [pc, #20]	; (8006a10 <CDC_Transmit_FS+0x48>)
 80069fc:	f7fe fba2 	bl	8005144 <USBD_CDC_TransmitPacket>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	2000020c 	.word	0x2000020c

08006a14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2212      	movs	r2, #18
 8006a48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	200000c8 	.word	0x200000c8

08006a5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a6e:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	200000dc 	.word	0x200000dc

08006a80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	4907      	ldr	r1, [pc, #28]	; (8006ab4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a96:	4808      	ldr	r0, [pc, #32]	; (8006ab8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a98:	f7ff fde2 	bl	8006660 <USBD_GetString>
 8006a9c:	e004      	b.n	8006aa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4904      	ldr	r1, [pc, #16]	; (8006ab4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006aa2:	4805      	ldr	r0, [pc, #20]	; (8006ab8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006aa4:	f7ff fddc 	bl	8006660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200014e8 	.word	0x200014e8
 8006ab8:	08008240 	.word	0x08008240

08006abc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	6039      	str	r1, [r7, #0]
 8006ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	4904      	ldr	r1, [pc, #16]	; (8006adc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006acc:	4804      	ldr	r0, [pc, #16]	; (8006ae0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ace:	f7ff fdc7 	bl	8006660 <USBD_GetString>
  return USBD_StrDesc;
 8006ad2:	4b02      	ldr	r3, [pc, #8]	; (8006adc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	200014e8 	.word	0x200014e8
 8006ae0:	08008258 	.word	0x08008258

08006ae4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	221a      	movs	r2, #26
 8006af4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006af6:	f000 f843 	bl	8006b80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006afa:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	200000e0 	.word	0x200000e0

08006b08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d105      	bne.n	8006b26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4907      	ldr	r1, [pc, #28]	; (8006b3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b1e:	4808      	ldr	r0, [pc, #32]	; (8006b40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b20:	f7ff fd9e 	bl	8006660 <USBD_GetString>
 8006b24:	e004      	b.n	8006b30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	4904      	ldr	r1, [pc, #16]	; (8006b3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b2a:	4805      	ldr	r0, [pc, #20]	; (8006b40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b2c:	f7ff fd98 	bl	8006660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b30:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200014e8 	.word	0x200014e8
 8006b40:	0800826c 	.word	0x0800826c

08006b44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6039      	str	r1, [r7, #0]
 8006b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	4907      	ldr	r1, [pc, #28]	; (8006b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b5a:	4808      	ldr	r0, [pc, #32]	; (8006b7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b5c:	f7ff fd80 	bl	8006660 <USBD_GetString>
 8006b60:	e004      	b.n	8006b6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4904      	ldr	r1, [pc, #16]	; (8006b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b66:	4805      	ldr	r0, [pc, #20]	; (8006b7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b68:	f7ff fd7a 	bl	8006660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200014e8 	.word	0x200014e8
 8006b7c:	08008278 	.word	0x08008278

08006b80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <Get_SerialNum+0x44>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <Get_SerialNum+0x48>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b92:	4b0e      	ldr	r3, [pc, #56]	; (8006bcc <Get_SerialNum+0x4c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ba6:	2208      	movs	r2, #8
 8006ba8:	4909      	ldr	r1, [pc, #36]	; (8006bd0 <Get_SerialNum+0x50>)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f814 	bl	8006bd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	4908      	ldr	r1, [pc, #32]	; (8006bd4 <Get_SerialNum+0x54>)
 8006bb4:	68b8      	ldr	r0, [r7, #8]
 8006bb6:	f000 f80f 	bl	8006bd8 <IntToUnicode>
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	1fff7a10 	.word	0x1fff7a10
 8006bc8:	1fff7a14 	.word	0x1fff7a14
 8006bcc:	1fff7a18 	.word	0x1fff7a18
 8006bd0:	200000e2 	.word	0x200000e2
 8006bd4:	200000f2 	.word	0x200000f2

08006bd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e027      	b.n	8006c40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	0f1b      	lsrs	r3, r3, #28
 8006bf4:	2b09      	cmp	r3, #9
 8006bf6:	d80b      	bhi.n	8006c10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	0f1b      	lsrs	r3, r3, #28
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	4619      	mov	r1, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	440b      	add	r3, r1
 8006c08:	3230      	adds	r2, #48	; 0x30
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e00a      	b.n	8006c26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	0f1b      	lsrs	r3, r3, #28
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	440b      	add	r3, r1
 8006c20:	3237      	adds	r2, #55	; 0x37
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	3301      	adds	r3, #1
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4413      	add	r3, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]
 8006c40:	7dfa      	ldrb	r2, [r7, #23]
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d3d3      	bcc.n	8006bf0 <IntToUnicode+0x18>
  }
}
 8006c48:	bf00      	nop
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	; 0x28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c60:	f107 0314 	add.w	r3, r7, #20
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	605a      	str	r2, [r3, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
 8006c6c:	60da      	str	r2, [r3, #12]
 8006c6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c78:	d13a      	bne.n	8006cf0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ca8:	230a      	movs	r3, #10
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4812      	ldr	r0, [pc, #72]	; (8006cfc <HAL_PCD_MspInit+0xa4>)
 8006cb4:	f7fa f8e4 	bl	8000e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cb8:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbc:	4a0e      	ldr	r2, [pc, #56]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	6353      	str	r3, [r2, #52]	; 0x34
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ccc:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <HAL_PCD_MspInit+0xa0>)
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	2043      	movs	r0, #67	; 0x43
 8006ce6:	f7fa f894 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006cea:	2043      	movs	r0, #67	; 0x43
 8006cec:	f7fa f8ad 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40020000 	.word	0x40020000

08006d00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fe fb43 	bl	80053a2 <USBD_LL_SetupStage>
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f7fe fb7d 	bl	800544c <USBD_LL_DataOutStage>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006d6c:	78fa      	ldrb	r2, [r7, #3]
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	334c      	adds	r3, #76	; 0x4c
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f7fe fc16 	bl	80055b2 <USBD_LL_DataInStage>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fd4a 	bl	8005836 <USBD_LL_SOF>
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	e008      	b.n	8006dd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d102      	bne.n	8006dd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e001      	b.n	8006dd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006dd2:	f7f9 fd6b 	bl	80008ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ddc:	7bfa      	ldrb	r2, [r7, #15]
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fcea 	bl	80057ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fc92 	bl	8005716 <USBD_LL_Reset>
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fce5 	bl	80057da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <HAL_PCD_SuspendCallback+0x48>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4a03      	ldr	r2, [pc, #12]	; (8006e44 <HAL_PCD_SuspendCallback+0x48>)
 8006e36:	f043 0306 	orr.w	r3, r3, #6
 8006e3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	e000ed00 	.word	0xe000ed00

08006e48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fcd5 	bl	8005806 <USBD_LL_Resume>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fd2d 	bl	80058da <USBD_LL_IsoOUTIncomplete>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fce9 	bl	8005876 <USBD_LL_IsoINIncomplete>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fd3f 	bl	800593e <USBD_LL_DevConnected>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fd3c 	bl	8005954 <USBD_LL_DevDisconnected>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d13c      	bne.n	8006f6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ef4:	4a20      	ldr	r2, [pc, #128]	; (8006f78 <USBD_LL_Init+0x94>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f0e:	2204      	movs	r2, #4
 8006f10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f12:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f14:	2202      	movs	r2, #2
 8006f16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f20:	2202      	movs	r2, #2
 8006f22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f24:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f42:	480d      	ldr	r0, [pc, #52]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f44:	f7fa f969 	bl	800121a <HAL_PCD_Init>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006f4e:	f7f9 fcad 	bl	80008ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	4808      	ldr	r0, [pc, #32]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f56:	f7fb fbc0 	bl	80026da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f5a:	2240      	movs	r2, #64	; 0x40
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4806      	ldr	r0, [pc, #24]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f60:	f7fb fb74 	bl	800264c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f64:	2280      	movs	r2, #128	; 0x80
 8006f66:	2101      	movs	r1, #1
 8006f68:	4803      	ldr	r0, [pc, #12]	; (8006f78 <USBD_LL_Init+0x94>)
 8006f6a:	f7fb fb6f 	bl	800264c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200016e8 	.word	0x200016e8

08006f7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fa fa5e 	bl	8001454 <HAL_PCD_Start>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f942 	bl	8007228 <USBD_Get_USB_Status>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	70fb      	strb	r3, [r7, #3]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70bb      	strb	r3, [r7, #2]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fda:	78bb      	ldrb	r3, [r7, #2]
 8006fdc:	883a      	ldrh	r2, [r7, #0]
 8006fde:	78f9      	ldrb	r1, [r7, #3]
 8006fe0:	f7fa ff2f 	bl	8001e42 <HAL_PCD_EP_Open>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f91c 	bl	8007228 <USBD_Get_USB_Status>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f7fa ff78 	bl	8001f12 <HAL_PCD_EP_Close>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f8fd 	bl	8007228 <USBD_Get_USB_Status>
 800702e:	4603      	mov	r3, r0
 8007030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007032:	7bbb      	ldrb	r3, [r7, #14]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f7fb f850 	bl	8002100 <HAL_PCD_EP_SetStall>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f8de 	bl	8007228 <USBD_Get_USB_Status>
 800706c:	4603      	mov	r3, r0
 800706e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007070:	7bbb      	ldrb	r3, [r7, #14]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f7fb f895 	bl	80021c8 <HAL_PCD_EP_ClrStall>
 800709e:	4603      	mov	r3, r0
 80070a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f8bf 	bl	8007228 <USBD_Get_USB_Status>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da0b      	bge.n	80070ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	333e      	adds	r3, #62	; 0x3e
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	e00b      	b.n	8007104 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7fa fe62 	bl	8001df8 <HAL_PCD_SetAddress>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f874 	bl	8007228 <USBD_Get_USB_Status>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007144:	7bbb      	ldrb	r3, [r7, #14]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	460b      	mov	r3, r1
 800715c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800716c:	7af9      	ldrb	r1, [r7, #11]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	f7fa ff7b 	bl	800206c <HAL_PCD_EP_Transmit>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f853 	bl	8007228 <USBD_Get_USB_Status>
 8007182:	4603      	mov	r3, r0
 8007184:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007186:	7dbb      	ldrb	r3, [r7, #22]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	460b      	mov	r3, r1
 800719e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071ae:	7af9      	ldrb	r1, [r7, #11]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	f7fa fef7 	bl	8001fa6 <HAL_PCD_EP_Receive>
 80071b8:	4603      	mov	r3, r0
 80071ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f832 	bl	8007228 <USBD_Get_USB_Status>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fa ff27 	bl	800203c <HAL_PCD_EP_GetRxCount>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007200:	4b03      	ldr	r3, [pc, #12]	; (8007210 <USBD_static_malloc+0x18>)
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20001bf4 	.word	0x20001bf4

08007214 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d817      	bhi.n	800726c <USBD_Get_USB_Status+0x44>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <USBD_Get_USB_Status+0x1c>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	0800725b 	.word	0x0800725b
 800724c:	08007261 	.word	0x08007261
 8007250:	08007267 	.word	0x08007267
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
    break;
 8007258:	e00b      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	73fb      	strb	r3, [r7, #15]
    break;
 800725e:	e008      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
    break;
 8007264:	e005      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	73fb      	strb	r3, [r7, #15]
    break;
 800726a:	e002      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	73fb      	strb	r3, [r7, #15]
    break;
 8007270:	bf00      	nop
  }
  return usb_status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <__errno>:
 8007280:	4b01      	ldr	r3, [pc, #4]	; (8007288 <__errno+0x8>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	200000fc 	.word	0x200000fc

0800728c <__libc_init_array>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	4d0d      	ldr	r5, [pc, #52]	; (80072c4 <__libc_init_array+0x38>)
 8007290:	4c0d      	ldr	r4, [pc, #52]	; (80072c8 <__libc_init_array+0x3c>)
 8007292:	1b64      	subs	r4, r4, r5
 8007294:	10a4      	asrs	r4, r4, #2
 8007296:	2600      	movs	r6, #0
 8007298:	42a6      	cmp	r6, r4
 800729a:	d109      	bne.n	80072b0 <__libc_init_array+0x24>
 800729c:	4d0b      	ldr	r5, [pc, #44]	; (80072cc <__libc_init_array+0x40>)
 800729e:	4c0c      	ldr	r4, [pc, #48]	; (80072d0 <__libc_init_array+0x44>)
 80072a0:	f000 ffbc 	bl	800821c <_init>
 80072a4:	1b64      	subs	r4, r4, r5
 80072a6:	10a4      	asrs	r4, r4, #2
 80072a8:	2600      	movs	r6, #0
 80072aa:	42a6      	cmp	r6, r4
 80072ac:	d105      	bne.n	80072ba <__libc_init_array+0x2e>
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b4:	4798      	blx	r3
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7ee      	b.n	8007298 <__libc_init_array+0xc>
 80072ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80072be:	4798      	blx	r3
 80072c0:	3601      	adds	r6, #1
 80072c2:	e7f2      	b.n	80072aa <__libc_init_array+0x1e>
 80072c4:	08008338 	.word	0x08008338
 80072c8:	08008338 	.word	0x08008338
 80072cc:	08008338 	.word	0x08008338
 80072d0:	0800833c 	.word	0x0800833c

080072d4 <memcpy>:
 80072d4:	440a      	add	r2, r1
 80072d6:	4291      	cmp	r1, r2
 80072d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072dc:	d100      	bne.n	80072e0 <memcpy+0xc>
 80072de:	4770      	bx	lr
 80072e0:	b510      	push	{r4, lr}
 80072e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ea:	4291      	cmp	r1, r2
 80072ec:	d1f9      	bne.n	80072e2 <memcpy+0xe>
 80072ee:	bd10      	pop	{r4, pc}

080072f0 <memset>:
 80072f0:	4402      	add	r2, r0
 80072f2:	4603      	mov	r3, r0
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d100      	bne.n	80072fa <memset+0xa>
 80072f8:	4770      	bx	lr
 80072fa:	f803 1b01 	strb.w	r1, [r3], #1
 80072fe:	e7f9      	b.n	80072f4 <memset+0x4>

08007300 <iprintf>:
 8007300:	b40f      	push	{r0, r1, r2, r3}
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <iprintf+0x2c>)
 8007304:	b513      	push	{r0, r1, r4, lr}
 8007306:	681c      	ldr	r4, [r3, #0]
 8007308:	b124      	cbz	r4, 8007314 <iprintf+0x14>
 800730a:	69a3      	ldr	r3, [r4, #24]
 800730c:	b913      	cbnz	r3, 8007314 <iprintf+0x14>
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f866 	bl	80073e0 <__sinit>
 8007314:	ab05      	add	r3, sp, #20
 8007316:	9a04      	ldr	r2, [sp, #16]
 8007318:	68a1      	ldr	r1, [r4, #8]
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	4620      	mov	r0, r4
 800731e:	f000 f9bd 	bl	800769c <_vfiprintf_r>
 8007322:	b002      	add	sp, #8
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	b004      	add	sp, #16
 800732a:	4770      	bx	lr
 800732c:	200000fc 	.word	0x200000fc

08007330 <std>:
 8007330:	2300      	movs	r3, #0
 8007332:	b510      	push	{r4, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	e9c0 3300 	strd	r3, r3, [r0]
 800733a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800733e:	6083      	str	r3, [r0, #8]
 8007340:	8181      	strh	r1, [r0, #12]
 8007342:	6643      	str	r3, [r0, #100]	; 0x64
 8007344:	81c2      	strh	r2, [r0, #14]
 8007346:	6183      	str	r3, [r0, #24]
 8007348:	4619      	mov	r1, r3
 800734a:	2208      	movs	r2, #8
 800734c:	305c      	adds	r0, #92	; 0x5c
 800734e:	f7ff ffcf 	bl	80072f0 <memset>
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <std+0x38>)
 8007354:	6263      	str	r3, [r4, #36]	; 0x24
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <std+0x3c>)
 8007358:	62a3      	str	r3, [r4, #40]	; 0x28
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <std+0x40>)
 800735c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <std+0x44>)
 8007360:	6224      	str	r4, [r4, #32]
 8007362:	6323      	str	r3, [r4, #48]	; 0x30
 8007364:	bd10      	pop	{r4, pc}
 8007366:	bf00      	nop
 8007368:	08007c45 	.word	0x08007c45
 800736c:	08007c67 	.word	0x08007c67
 8007370:	08007c9f 	.word	0x08007c9f
 8007374:	08007cc3 	.word	0x08007cc3

08007378 <_cleanup_r>:
 8007378:	4901      	ldr	r1, [pc, #4]	; (8007380 <_cleanup_r+0x8>)
 800737a:	f000 b8af 	b.w	80074dc <_fwalk_reent>
 800737e:	bf00      	nop
 8007380:	08007f9d 	.word	0x08007f9d

08007384 <__sfmoreglue>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	2268      	movs	r2, #104	; 0x68
 8007388:	1e4d      	subs	r5, r1, #1
 800738a:	4355      	muls	r5, r2
 800738c:	460e      	mov	r6, r1
 800738e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007392:	f000 f8e5 	bl	8007560 <_malloc_r>
 8007396:	4604      	mov	r4, r0
 8007398:	b140      	cbz	r0, 80073ac <__sfmoreglue+0x28>
 800739a:	2100      	movs	r1, #0
 800739c:	e9c0 1600 	strd	r1, r6, [r0]
 80073a0:	300c      	adds	r0, #12
 80073a2:	60a0      	str	r0, [r4, #8]
 80073a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073a8:	f7ff ffa2 	bl	80072f0 <memset>
 80073ac:	4620      	mov	r0, r4
 80073ae:	bd70      	pop	{r4, r5, r6, pc}

080073b0 <__sfp_lock_acquire>:
 80073b0:	4801      	ldr	r0, [pc, #4]	; (80073b8 <__sfp_lock_acquire+0x8>)
 80073b2:	f000 b8b3 	b.w	800751c <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	20001e15 	.word	0x20001e15

080073bc <__sfp_lock_release>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__sfp_lock_release+0x8>)
 80073be:	f000 b8ae 	b.w	800751e <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	20001e15 	.word	0x20001e15

080073c8 <__sinit_lock_acquire>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__sinit_lock_acquire+0x8>)
 80073ca:	f000 b8a7 	b.w	800751c <__retarget_lock_acquire_recursive>
 80073ce:	bf00      	nop
 80073d0:	20001e16 	.word	0x20001e16

080073d4 <__sinit_lock_release>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__sinit_lock_release+0x8>)
 80073d6:	f000 b8a2 	b.w	800751e <__retarget_lock_release_recursive>
 80073da:	bf00      	nop
 80073dc:	20001e16 	.word	0x20001e16

080073e0 <__sinit>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	4604      	mov	r4, r0
 80073e4:	f7ff fff0 	bl	80073c8 <__sinit_lock_acquire>
 80073e8:	69a3      	ldr	r3, [r4, #24]
 80073ea:	b11b      	cbz	r3, 80073f4 <__sinit+0x14>
 80073ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f0:	f7ff bff0 	b.w	80073d4 <__sinit_lock_release>
 80073f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073f8:	6523      	str	r3, [r4, #80]	; 0x50
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <__sinit+0x68>)
 80073fc:	4a13      	ldr	r2, [pc, #76]	; (800744c <__sinit+0x6c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	62a2      	str	r2, [r4, #40]	; 0x28
 8007402:	42a3      	cmp	r3, r4
 8007404:	bf04      	itt	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	61a3      	streq	r3, [r4, #24]
 800740a:	4620      	mov	r0, r4
 800740c:	f000 f820 	bl	8007450 <__sfp>
 8007410:	6060      	str	r0, [r4, #4]
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f81c 	bl	8007450 <__sfp>
 8007418:	60a0      	str	r0, [r4, #8]
 800741a:	4620      	mov	r0, r4
 800741c:	f000 f818 	bl	8007450 <__sfp>
 8007420:	2200      	movs	r2, #0
 8007422:	60e0      	str	r0, [r4, #12]
 8007424:	2104      	movs	r1, #4
 8007426:	6860      	ldr	r0, [r4, #4]
 8007428:	f7ff ff82 	bl	8007330 <std>
 800742c:	68a0      	ldr	r0, [r4, #8]
 800742e:	2201      	movs	r2, #1
 8007430:	2109      	movs	r1, #9
 8007432:	f7ff ff7d 	bl	8007330 <std>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	2202      	movs	r2, #2
 800743a:	2112      	movs	r1, #18
 800743c:	f7ff ff78 	bl	8007330 <std>
 8007440:	2301      	movs	r3, #1
 8007442:	61a3      	str	r3, [r4, #24]
 8007444:	e7d2      	b.n	80073ec <__sinit+0xc>
 8007446:	bf00      	nop
 8007448:	08008298 	.word	0x08008298
 800744c:	08007379 	.word	0x08007379

08007450 <__sfp>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	4607      	mov	r7, r0
 8007454:	f7ff ffac 	bl	80073b0 <__sfp_lock_acquire>
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <__sfp+0x84>)
 800745a:	681e      	ldr	r6, [r3, #0]
 800745c:	69b3      	ldr	r3, [r6, #24]
 800745e:	b913      	cbnz	r3, 8007466 <__sfp+0x16>
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ffbd 	bl	80073e0 <__sinit>
 8007466:	3648      	adds	r6, #72	; 0x48
 8007468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	d503      	bpl.n	8007478 <__sfp+0x28>
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	b30b      	cbz	r3, 80074b8 <__sfp+0x68>
 8007474:	6836      	ldr	r6, [r6, #0]
 8007476:	e7f7      	b.n	8007468 <__sfp+0x18>
 8007478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800747c:	b9d5      	cbnz	r5, 80074b4 <__sfp+0x64>
 800747e:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <__sfp+0x88>)
 8007480:	60e3      	str	r3, [r4, #12]
 8007482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007486:	6665      	str	r5, [r4, #100]	; 0x64
 8007488:	f000 f847 	bl	800751a <__retarget_lock_init_recursive>
 800748c:	f7ff ff96 	bl	80073bc <__sfp_lock_release>
 8007490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007498:	6025      	str	r5, [r4, #0]
 800749a:	61a5      	str	r5, [r4, #24]
 800749c:	2208      	movs	r2, #8
 800749e:	4629      	mov	r1, r5
 80074a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074a4:	f7ff ff24 	bl	80072f0 <memset>
 80074a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074b0:	4620      	mov	r0, r4
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b4:	3468      	adds	r4, #104	; 0x68
 80074b6:	e7d9      	b.n	800746c <__sfp+0x1c>
 80074b8:	2104      	movs	r1, #4
 80074ba:	4638      	mov	r0, r7
 80074bc:	f7ff ff62 	bl	8007384 <__sfmoreglue>
 80074c0:	4604      	mov	r4, r0
 80074c2:	6030      	str	r0, [r6, #0]
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d1d5      	bne.n	8007474 <__sfp+0x24>
 80074c8:	f7ff ff78 	bl	80073bc <__sfp_lock_release>
 80074cc:	230c      	movs	r3, #12
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	e7ee      	b.n	80074b0 <__sfp+0x60>
 80074d2:	bf00      	nop
 80074d4:	08008298 	.word	0x08008298
 80074d8:	ffff0001 	.word	0xffff0001

080074dc <_fwalk_reent>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	4606      	mov	r6, r0
 80074e2:	4688      	mov	r8, r1
 80074e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074e8:	2700      	movs	r7, #0
 80074ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074ee:	f1b9 0901 	subs.w	r9, r9, #1
 80074f2:	d505      	bpl.n	8007500 <_fwalk_reent+0x24>
 80074f4:	6824      	ldr	r4, [r4, #0]
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	d1f7      	bne.n	80074ea <_fwalk_reent+0xe>
 80074fa:	4638      	mov	r0, r7
 80074fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007500:	89ab      	ldrh	r3, [r5, #12]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d907      	bls.n	8007516 <_fwalk_reent+0x3a>
 8007506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800750a:	3301      	adds	r3, #1
 800750c:	d003      	beq.n	8007516 <_fwalk_reent+0x3a>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	47c0      	blx	r8
 8007514:	4307      	orrs	r7, r0
 8007516:	3568      	adds	r5, #104	; 0x68
 8007518:	e7e9      	b.n	80074ee <_fwalk_reent+0x12>

0800751a <__retarget_lock_init_recursive>:
 800751a:	4770      	bx	lr

0800751c <__retarget_lock_acquire_recursive>:
 800751c:	4770      	bx	lr

0800751e <__retarget_lock_release_recursive>:
 800751e:	4770      	bx	lr

08007520 <sbrk_aligned>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4e0e      	ldr	r6, [pc, #56]	; (800755c <sbrk_aligned+0x3c>)
 8007524:	460c      	mov	r4, r1
 8007526:	6831      	ldr	r1, [r6, #0]
 8007528:	4605      	mov	r5, r0
 800752a:	b911      	cbnz	r1, 8007532 <sbrk_aligned+0x12>
 800752c:	f000 fb7a 	bl	8007c24 <_sbrk_r>
 8007530:	6030      	str	r0, [r6, #0]
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f000 fb75 	bl	8007c24 <_sbrk_r>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d00a      	beq.n	8007554 <sbrk_aligned+0x34>
 800753e:	1cc4      	adds	r4, r0, #3
 8007540:	f024 0403 	bic.w	r4, r4, #3
 8007544:	42a0      	cmp	r0, r4
 8007546:	d007      	beq.n	8007558 <sbrk_aligned+0x38>
 8007548:	1a21      	subs	r1, r4, r0
 800754a:	4628      	mov	r0, r5
 800754c:	f000 fb6a 	bl	8007c24 <_sbrk_r>
 8007550:	3001      	adds	r0, #1
 8007552:	d101      	bne.n	8007558 <sbrk_aligned+0x38>
 8007554:	f04f 34ff 	mov.w	r4, #4294967295
 8007558:	4620      	mov	r0, r4
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	20001e1c 	.word	0x20001e1c

08007560 <_malloc_r>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	1ccd      	adds	r5, r1, #3
 8007566:	f025 0503 	bic.w	r5, r5, #3
 800756a:	3508      	adds	r5, #8
 800756c:	2d0c      	cmp	r5, #12
 800756e:	bf38      	it	cc
 8007570:	250c      	movcc	r5, #12
 8007572:	2d00      	cmp	r5, #0
 8007574:	4607      	mov	r7, r0
 8007576:	db01      	blt.n	800757c <_malloc_r+0x1c>
 8007578:	42a9      	cmp	r1, r5
 800757a:	d905      	bls.n	8007588 <_malloc_r+0x28>
 800757c:	230c      	movs	r3, #12
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	2600      	movs	r6, #0
 8007582:	4630      	mov	r0, r6
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	4e2e      	ldr	r6, [pc, #184]	; (8007644 <_malloc_r+0xe4>)
 800758a:	f000 fdbb 	bl	8008104 <__malloc_lock>
 800758e:	6833      	ldr	r3, [r6, #0]
 8007590:	461c      	mov	r4, r3
 8007592:	bb34      	cbnz	r4, 80075e2 <_malloc_r+0x82>
 8007594:	4629      	mov	r1, r5
 8007596:	4638      	mov	r0, r7
 8007598:	f7ff ffc2 	bl	8007520 <sbrk_aligned>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	4604      	mov	r4, r0
 80075a0:	d14d      	bne.n	800763e <_malloc_r+0xde>
 80075a2:	6834      	ldr	r4, [r6, #0]
 80075a4:	4626      	mov	r6, r4
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	d140      	bne.n	800762c <_malloc_r+0xcc>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	4631      	mov	r1, r6
 80075ae:	4638      	mov	r0, r7
 80075b0:	eb04 0803 	add.w	r8, r4, r3
 80075b4:	f000 fb36 	bl	8007c24 <_sbrk_r>
 80075b8:	4580      	cmp	r8, r0
 80075ba:	d13a      	bne.n	8007632 <_malloc_r+0xd2>
 80075bc:	6821      	ldr	r1, [r4, #0]
 80075be:	3503      	adds	r5, #3
 80075c0:	1a6d      	subs	r5, r5, r1
 80075c2:	f025 0503 	bic.w	r5, r5, #3
 80075c6:	3508      	adds	r5, #8
 80075c8:	2d0c      	cmp	r5, #12
 80075ca:	bf38      	it	cc
 80075cc:	250c      	movcc	r5, #12
 80075ce:	4629      	mov	r1, r5
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff ffa5 	bl	8007520 <sbrk_aligned>
 80075d6:	3001      	adds	r0, #1
 80075d8:	d02b      	beq.n	8007632 <_malloc_r+0xd2>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	442b      	add	r3, r5
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	e00e      	b.n	8007600 <_malloc_r+0xa0>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	1b52      	subs	r2, r2, r5
 80075e6:	d41e      	bmi.n	8007626 <_malloc_r+0xc6>
 80075e8:	2a0b      	cmp	r2, #11
 80075ea:	d916      	bls.n	800761a <_malloc_r+0xba>
 80075ec:	1961      	adds	r1, r4, r5
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	bf18      	it	ne
 80075f4:	6059      	strne	r1, [r3, #4]
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	bf08      	it	eq
 80075fa:	6031      	streq	r1, [r6, #0]
 80075fc:	5162      	str	r2, [r4, r5]
 80075fe:	604b      	str	r3, [r1, #4]
 8007600:	4638      	mov	r0, r7
 8007602:	f104 060b 	add.w	r6, r4, #11
 8007606:	f000 fd83 	bl	8008110 <__malloc_unlock>
 800760a:	f026 0607 	bic.w	r6, r6, #7
 800760e:	1d23      	adds	r3, r4, #4
 8007610:	1af2      	subs	r2, r6, r3
 8007612:	d0b6      	beq.n	8007582 <_malloc_r+0x22>
 8007614:	1b9b      	subs	r3, r3, r6
 8007616:	50a3      	str	r3, [r4, r2]
 8007618:	e7b3      	b.n	8007582 <_malloc_r+0x22>
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	42a3      	cmp	r3, r4
 800761e:	bf0c      	ite	eq
 8007620:	6032      	streq	r2, [r6, #0]
 8007622:	605a      	strne	r2, [r3, #4]
 8007624:	e7ec      	b.n	8007600 <_malloc_r+0xa0>
 8007626:	4623      	mov	r3, r4
 8007628:	6864      	ldr	r4, [r4, #4]
 800762a:	e7b2      	b.n	8007592 <_malloc_r+0x32>
 800762c:	4634      	mov	r4, r6
 800762e:	6876      	ldr	r6, [r6, #4]
 8007630:	e7b9      	b.n	80075a6 <_malloc_r+0x46>
 8007632:	230c      	movs	r3, #12
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4638      	mov	r0, r7
 8007638:	f000 fd6a 	bl	8008110 <__malloc_unlock>
 800763c:	e7a1      	b.n	8007582 <_malloc_r+0x22>
 800763e:	6025      	str	r5, [r4, #0]
 8007640:	e7de      	b.n	8007600 <_malloc_r+0xa0>
 8007642:	bf00      	nop
 8007644:	20001e18 	.word	0x20001e18

08007648 <__sfputc_r>:
 8007648:	6893      	ldr	r3, [r2, #8]
 800764a:	3b01      	subs	r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	b410      	push	{r4}
 8007650:	6093      	str	r3, [r2, #8]
 8007652:	da08      	bge.n	8007666 <__sfputc_r+0x1e>
 8007654:	6994      	ldr	r4, [r2, #24]
 8007656:	42a3      	cmp	r3, r4
 8007658:	db01      	blt.n	800765e <__sfputc_r+0x16>
 800765a:	290a      	cmp	r1, #10
 800765c:	d103      	bne.n	8007666 <__sfputc_r+0x1e>
 800765e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007662:	f000 bb33 	b.w	8007ccc <__swbuf_r>
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	1c58      	adds	r0, r3, #1
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	7019      	strb	r1, [r3, #0]
 800766e:	4608      	mov	r0, r1
 8007670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007674:	4770      	bx	lr

08007676 <__sfputs_r>:
 8007676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007678:	4606      	mov	r6, r0
 800767a:	460f      	mov	r7, r1
 800767c:	4614      	mov	r4, r2
 800767e:	18d5      	adds	r5, r2, r3
 8007680:	42ac      	cmp	r4, r5
 8007682:	d101      	bne.n	8007688 <__sfputs_r+0x12>
 8007684:	2000      	movs	r0, #0
 8007686:	e007      	b.n	8007698 <__sfputs_r+0x22>
 8007688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800768c:	463a      	mov	r2, r7
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff ffda 	bl	8007648 <__sfputc_r>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d1f3      	bne.n	8007680 <__sfputs_r+0xa>
 8007698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800769c <_vfiprintf_r>:
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	460d      	mov	r5, r1
 80076a2:	b09d      	sub	sp, #116	; 0x74
 80076a4:	4614      	mov	r4, r2
 80076a6:	4698      	mov	r8, r3
 80076a8:	4606      	mov	r6, r0
 80076aa:	b118      	cbz	r0, 80076b4 <_vfiprintf_r+0x18>
 80076ac:	6983      	ldr	r3, [r0, #24]
 80076ae:	b90b      	cbnz	r3, 80076b4 <_vfiprintf_r+0x18>
 80076b0:	f7ff fe96 	bl	80073e0 <__sinit>
 80076b4:	4b89      	ldr	r3, [pc, #548]	; (80078dc <_vfiprintf_r+0x240>)
 80076b6:	429d      	cmp	r5, r3
 80076b8:	d11b      	bne.n	80076f2 <_vfiprintf_r+0x56>
 80076ba:	6875      	ldr	r5, [r6, #4]
 80076bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076be:	07d9      	lsls	r1, r3, #31
 80076c0:	d405      	bmi.n	80076ce <_vfiprintf_r+0x32>
 80076c2:	89ab      	ldrh	r3, [r5, #12]
 80076c4:	059a      	lsls	r2, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_vfiprintf_r+0x32>
 80076c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ca:	f7ff ff27 	bl	800751c <__retarget_lock_acquire_recursive>
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	071b      	lsls	r3, r3, #28
 80076d2:	d501      	bpl.n	80076d8 <_vfiprintf_r+0x3c>
 80076d4:	692b      	ldr	r3, [r5, #16]
 80076d6:	b9eb      	cbnz	r3, 8007714 <_vfiprintf_r+0x78>
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f000 fb5a 	bl	8007d94 <__swsetup_r>
 80076e0:	b1c0      	cbz	r0, 8007714 <_vfiprintf_r+0x78>
 80076e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e4:	07dc      	lsls	r4, r3, #31
 80076e6:	d50e      	bpl.n	8007706 <_vfiprintf_r+0x6a>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	b01d      	add	sp, #116	; 0x74
 80076ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	4b7b      	ldr	r3, [pc, #492]	; (80078e0 <_vfiprintf_r+0x244>)
 80076f4:	429d      	cmp	r5, r3
 80076f6:	d101      	bne.n	80076fc <_vfiprintf_r+0x60>
 80076f8:	68b5      	ldr	r5, [r6, #8]
 80076fa:	e7df      	b.n	80076bc <_vfiprintf_r+0x20>
 80076fc:	4b79      	ldr	r3, [pc, #484]	; (80078e4 <_vfiprintf_r+0x248>)
 80076fe:	429d      	cmp	r5, r3
 8007700:	bf08      	it	eq
 8007702:	68f5      	ldreq	r5, [r6, #12]
 8007704:	e7da      	b.n	80076bc <_vfiprintf_r+0x20>
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	0598      	lsls	r0, r3, #22
 800770a:	d4ed      	bmi.n	80076e8 <_vfiprintf_r+0x4c>
 800770c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800770e:	f7ff ff06 	bl	800751e <__retarget_lock_release_recursive>
 8007712:	e7e9      	b.n	80076e8 <_vfiprintf_r+0x4c>
 8007714:	2300      	movs	r3, #0
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	2320      	movs	r3, #32
 800771a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800771e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007722:	2330      	movs	r3, #48	; 0x30
 8007724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078e8 <_vfiprintf_r+0x24c>
 8007728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800772c:	f04f 0901 	mov.w	r9, #1
 8007730:	4623      	mov	r3, r4
 8007732:	469a      	mov	sl, r3
 8007734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007738:	b10a      	cbz	r2, 800773e <_vfiprintf_r+0xa2>
 800773a:	2a25      	cmp	r2, #37	; 0x25
 800773c:	d1f9      	bne.n	8007732 <_vfiprintf_r+0x96>
 800773e:	ebba 0b04 	subs.w	fp, sl, r4
 8007742:	d00b      	beq.n	800775c <_vfiprintf_r+0xc0>
 8007744:	465b      	mov	r3, fp
 8007746:	4622      	mov	r2, r4
 8007748:	4629      	mov	r1, r5
 800774a:	4630      	mov	r0, r6
 800774c:	f7ff ff93 	bl	8007676 <__sfputs_r>
 8007750:	3001      	adds	r0, #1
 8007752:	f000 80aa 	beq.w	80078aa <_vfiprintf_r+0x20e>
 8007756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007758:	445a      	add	r2, fp
 800775a:	9209      	str	r2, [sp, #36]	; 0x24
 800775c:	f89a 3000 	ldrb.w	r3, [sl]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 80a2 	beq.w	80078aa <_vfiprintf_r+0x20e>
 8007766:	2300      	movs	r3, #0
 8007768:	f04f 32ff 	mov.w	r2, #4294967295
 800776c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007770:	f10a 0a01 	add.w	sl, sl, #1
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	9307      	str	r3, [sp, #28]
 8007778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800777c:	931a      	str	r3, [sp, #104]	; 0x68
 800777e:	4654      	mov	r4, sl
 8007780:	2205      	movs	r2, #5
 8007782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007786:	4858      	ldr	r0, [pc, #352]	; (80078e8 <_vfiprintf_r+0x24c>)
 8007788:	f7f8 fd2a 	bl	80001e0 <memchr>
 800778c:	9a04      	ldr	r2, [sp, #16]
 800778e:	b9d8      	cbnz	r0, 80077c8 <_vfiprintf_r+0x12c>
 8007790:	06d1      	lsls	r1, r2, #27
 8007792:	bf44      	itt	mi
 8007794:	2320      	movmi	r3, #32
 8007796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800779a:	0713      	lsls	r3, r2, #28
 800779c:	bf44      	itt	mi
 800779e:	232b      	movmi	r3, #43	; 0x2b
 80077a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a4:	f89a 3000 	ldrb.w	r3, [sl]
 80077a8:	2b2a      	cmp	r3, #42	; 0x2a
 80077aa:	d015      	beq.n	80077d8 <_vfiprintf_r+0x13c>
 80077ac:	9a07      	ldr	r2, [sp, #28]
 80077ae:	4654      	mov	r4, sl
 80077b0:	2000      	movs	r0, #0
 80077b2:	f04f 0c0a 	mov.w	ip, #10
 80077b6:	4621      	mov	r1, r4
 80077b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077bc:	3b30      	subs	r3, #48	; 0x30
 80077be:	2b09      	cmp	r3, #9
 80077c0:	d94e      	bls.n	8007860 <_vfiprintf_r+0x1c4>
 80077c2:	b1b0      	cbz	r0, 80077f2 <_vfiprintf_r+0x156>
 80077c4:	9207      	str	r2, [sp, #28]
 80077c6:	e014      	b.n	80077f2 <_vfiprintf_r+0x156>
 80077c8:	eba0 0308 	sub.w	r3, r0, r8
 80077cc:	fa09 f303 	lsl.w	r3, r9, r3
 80077d0:	4313      	orrs	r3, r2
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	46a2      	mov	sl, r4
 80077d6:	e7d2      	b.n	800777e <_vfiprintf_r+0xe2>
 80077d8:	9b03      	ldr	r3, [sp, #12]
 80077da:	1d19      	adds	r1, r3, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	9103      	str	r1, [sp, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bfbb      	ittet	lt
 80077e4:	425b      	neglt	r3, r3
 80077e6:	f042 0202 	orrlt.w	r2, r2, #2
 80077ea:	9307      	strge	r3, [sp, #28]
 80077ec:	9307      	strlt	r3, [sp, #28]
 80077ee:	bfb8      	it	lt
 80077f0:	9204      	strlt	r2, [sp, #16]
 80077f2:	7823      	ldrb	r3, [r4, #0]
 80077f4:	2b2e      	cmp	r3, #46	; 0x2e
 80077f6:	d10c      	bne.n	8007812 <_vfiprintf_r+0x176>
 80077f8:	7863      	ldrb	r3, [r4, #1]
 80077fa:	2b2a      	cmp	r3, #42	; 0x2a
 80077fc:	d135      	bne.n	800786a <_vfiprintf_r+0x1ce>
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	1d1a      	adds	r2, r3, #4
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	9203      	str	r2, [sp, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	bfb8      	it	lt
 800780a:	f04f 33ff 	movlt.w	r3, #4294967295
 800780e:	3402      	adds	r4, #2
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078f8 <_vfiprintf_r+0x25c>
 8007816:	7821      	ldrb	r1, [r4, #0]
 8007818:	2203      	movs	r2, #3
 800781a:	4650      	mov	r0, sl
 800781c:	f7f8 fce0 	bl	80001e0 <memchr>
 8007820:	b140      	cbz	r0, 8007834 <_vfiprintf_r+0x198>
 8007822:	2340      	movs	r3, #64	; 0x40
 8007824:	eba0 000a 	sub.w	r0, r0, sl
 8007828:	fa03 f000 	lsl.w	r0, r3, r0
 800782c:	9b04      	ldr	r3, [sp, #16]
 800782e:	4303      	orrs	r3, r0
 8007830:	3401      	adds	r4, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	482c      	ldr	r0, [pc, #176]	; (80078ec <_vfiprintf_r+0x250>)
 800783a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800783e:	2206      	movs	r2, #6
 8007840:	f7f8 fcce 	bl	80001e0 <memchr>
 8007844:	2800      	cmp	r0, #0
 8007846:	d03f      	beq.n	80078c8 <_vfiprintf_r+0x22c>
 8007848:	4b29      	ldr	r3, [pc, #164]	; (80078f0 <_vfiprintf_r+0x254>)
 800784a:	bb1b      	cbnz	r3, 8007894 <_vfiprintf_r+0x1f8>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	3307      	adds	r3, #7
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	3308      	adds	r3, #8
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785a:	443b      	add	r3, r7
 800785c:	9309      	str	r3, [sp, #36]	; 0x24
 800785e:	e767      	b.n	8007730 <_vfiprintf_r+0x94>
 8007860:	fb0c 3202 	mla	r2, ip, r2, r3
 8007864:	460c      	mov	r4, r1
 8007866:	2001      	movs	r0, #1
 8007868:	e7a5      	b.n	80077b6 <_vfiprintf_r+0x11a>
 800786a:	2300      	movs	r3, #0
 800786c:	3401      	adds	r4, #1
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	4619      	mov	r1, r3
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4620      	mov	r0, r4
 8007878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787c:	3a30      	subs	r2, #48	; 0x30
 800787e:	2a09      	cmp	r2, #9
 8007880:	d903      	bls.n	800788a <_vfiprintf_r+0x1ee>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0c5      	beq.n	8007812 <_vfiprintf_r+0x176>
 8007886:	9105      	str	r1, [sp, #20]
 8007888:	e7c3      	b.n	8007812 <_vfiprintf_r+0x176>
 800788a:	fb0c 2101 	mla	r1, ip, r1, r2
 800788e:	4604      	mov	r4, r0
 8007890:	2301      	movs	r3, #1
 8007892:	e7f0      	b.n	8007876 <_vfiprintf_r+0x1da>
 8007894:	ab03      	add	r3, sp, #12
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	462a      	mov	r2, r5
 800789a:	4b16      	ldr	r3, [pc, #88]	; (80078f4 <_vfiprintf_r+0x258>)
 800789c:	a904      	add	r1, sp, #16
 800789e:	4630      	mov	r0, r6
 80078a0:	f3af 8000 	nop.w
 80078a4:	4607      	mov	r7, r0
 80078a6:	1c78      	adds	r0, r7, #1
 80078a8:	d1d6      	bne.n	8007858 <_vfiprintf_r+0x1bc>
 80078aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ac:	07d9      	lsls	r1, r3, #31
 80078ae:	d405      	bmi.n	80078bc <_vfiprintf_r+0x220>
 80078b0:	89ab      	ldrh	r3, [r5, #12]
 80078b2:	059a      	lsls	r2, r3, #22
 80078b4:	d402      	bmi.n	80078bc <_vfiprintf_r+0x220>
 80078b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078b8:	f7ff fe31 	bl	800751e <__retarget_lock_release_recursive>
 80078bc:	89ab      	ldrh	r3, [r5, #12]
 80078be:	065b      	lsls	r3, r3, #25
 80078c0:	f53f af12 	bmi.w	80076e8 <_vfiprintf_r+0x4c>
 80078c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c6:	e711      	b.n	80076ec <_vfiprintf_r+0x50>
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	462a      	mov	r2, r5
 80078ce:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <_vfiprintf_r+0x258>)
 80078d0:	a904      	add	r1, sp, #16
 80078d2:	4630      	mov	r0, r6
 80078d4:	f000 f880 	bl	80079d8 <_printf_i>
 80078d8:	e7e4      	b.n	80078a4 <_vfiprintf_r+0x208>
 80078da:	bf00      	nop
 80078dc:	080082bc 	.word	0x080082bc
 80078e0:	080082dc 	.word	0x080082dc
 80078e4:	0800829c 	.word	0x0800829c
 80078e8:	080082fc 	.word	0x080082fc
 80078ec:	08008306 	.word	0x08008306
 80078f0:	00000000 	.word	0x00000000
 80078f4:	08007677 	.word	0x08007677
 80078f8:	08008302 	.word	0x08008302

080078fc <_printf_common>:
 80078fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	4616      	mov	r6, r2
 8007902:	4699      	mov	r9, r3
 8007904:	688a      	ldr	r2, [r1, #8]
 8007906:	690b      	ldr	r3, [r1, #16]
 8007908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800790c:	4293      	cmp	r3, r2
 800790e:	bfb8      	it	lt
 8007910:	4613      	movlt	r3, r2
 8007912:	6033      	str	r3, [r6, #0]
 8007914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007918:	4607      	mov	r7, r0
 800791a:	460c      	mov	r4, r1
 800791c:	b10a      	cbz	r2, 8007922 <_printf_common+0x26>
 800791e:	3301      	adds	r3, #1
 8007920:	6033      	str	r3, [r6, #0]
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	0699      	lsls	r1, r3, #26
 8007926:	bf42      	ittt	mi
 8007928:	6833      	ldrmi	r3, [r6, #0]
 800792a:	3302      	addmi	r3, #2
 800792c:	6033      	strmi	r3, [r6, #0]
 800792e:	6825      	ldr	r5, [r4, #0]
 8007930:	f015 0506 	ands.w	r5, r5, #6
 8007934:	d106      	bne.n	8007944 <_printf_common+0x48>
 8007936:	f104 0a19 	add.w	sl, r4, #25
 800793a:	68e3      	ldr	r3, [r4, #12]
 800793c:	6832      	ldr	r2, [r6, #0]
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	42ab      	cmp	r3, r5
 8007942:	dc26      	bgt.n	8007992 <_printf_common+0x96>
 8007944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007948:	1e13      	subs	r3, r2, #0
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	bf18      	it	ne
 800794e:	2301      	movne	r3, #1
 8007950:	0692      	lsls	r2, r2, #26
 8007952:	d42b      	bmi.n	80079ac <_printf_common+0xb0>
 8007954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007958:	4649      	mov	r1, r9
 800795a:	4638      	mov	r0, r7
 800795c:	47c0      	blx	r8
 800795e:	3001      	adds	r0, #1
 8007960:	d01e      	beq.n	80079a0 <_printf_common+0xa4>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	68e5      	ldr	r5, [r4, #12]
 8007966:	6832      	ldr	r2, [r6, #0]
 8007968:	f003 0306 	and.w	r3, r3, #6
 800796c:	2b04      	cmp	r3, #4
 800796e:	bf08      	it	eq
 8007970:	1aad      	subeq	r5, r5, r2
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	bf0c      	ite	eq
 8007978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800797c:	2500      	movne	r5, #0
 800797e:	4293      	cmp	r3, r2
 8007980:	bfc4      	itt	gt
 8007982:	1a9b      	subgt	r3, r3, r2
 8007984:	18ed      	addgt	r5, r5, r3
 8007986:	2600      	movs	r6, #0
 8007988:	341a      	adds	r4, #26
 800798a:	42b5      	cmp	r5, r6
 800798c:	d11a      	bne.n	80079c4 <_printf_common+0xc8>
 800798e:	2000      	movs	r0, #0
 8007990:	e008      	b.n	80079a4 <_printf_common+0xa8>
 8007992:	2301      	movs	r3, #1
 8007994:	4652      	mov	r2, sl
 8007996:	4649      	mov	r1, r9
 8007998:	4638      	mov	r0, r7
 800799a:	47c0      	blx	r8
 800799c:	3001      	adds	r0, #1
 800799e:	d103      	bne.n	80079a8 <_printf_common+0xac>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a8:	3501      	adds	r5, #1
 80079aa:	e7c6      	b.n	800793a <_printf_common+0x3e>
 80079ac:	18e1      	adds	r1, r4, r3
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	2030      	movs	r0, #48	; 0x30
 80079b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079b6:	4422      	add	r2, r4
 80079b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079c0:	3302      	adds	r3, #2
 80079c2:	e7c7      	b.n	8007954 <_printf_common+0x58>
 80079c4:	2301      	movs	r3, #1
 80079c6:	4622      	mov	r2, r4
 80079c8:	4649      	mov	r1, r9
 80079ca:	4638      	mov	r0, r7
 80079cc:	47c0      	blx	r8
 80079ce:	3001      	adds	r0, #1
 80079d0:	d0e6      	beq.n	80079a0 <_printf_common+0xa4>
 80079d2:	3601      	adds	r6, #1
 80079d4:	e7d9      	b.n	800798a <_printf_common+0x8e>
	...

080079d8 <_printf_i>:
 80079d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	7e0f      	ldrb	r7, [r1, #24]
 80079de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079e0:	2f78      	cmp	r7, #120	; 0x78
 80079e2:	4691      	mov	r9, r2
 80079e4:	4680      	mov	r8, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	469a      	mov	sl, r3
 80079ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ee:	d807      	bhi.n	8007a00 <_printf_i+0x28>
 80079f0:	2f62      	cmp	r7, #98	; 0x62
 80079f2:	d80a      	bhi.n	8007a0a <_printf_i+0x32>
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	f000 80d8 	beq.w	8007baa <_printf_i+0x1d2>
 80079fa:	2f58      	cmp	r7, #88	; 0x58
 80079fc:	f000 80a3 	beq.w	8007b46 <_printf_i+0x16e>
 8007a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a08:	e03a      	b.n	8007a80 <_printf_i+0xa8>
 8007a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a0e:	2b15      	cmp	r3, #21
 8007a10:	d8f6      	bhi.n	8007a00 <_printf_i+0x28>
 8007a12:	a101      	add	r1, pc, #4	; (adr r1, 8007a18 <_printf_i+0x40>)
 8007a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a18:	08007a71 	.word	0x08007a71
 8007a1c:	08007a85 	.word	0x08007a85
 8007a20:	08007a01 	.word	0x08007a01
 8007a24:	08007a01 	.word	0x08007a01
 8007a28:	08007a01 	.word	0x08007a01
 8007a2c:	08007a01 	.word	0x08007a01
 8007a30:	08007a85 	.word	0x08007a85
 8007a34:	08007a01 	.word	0x08007a01
 8007a38:	08007a01 	.word	0x08007a01
 8007a3c:	08007a01 	.word	0x08007a01
 8007a40:	08007a01 	.word	0x08007a01
 8007a44:	08007b91 	.word	0x08007b91
 8007a48:	08007ab5 	.word	0x08007ab5
 8007a4c:	08007b73 	.word	0x08007b73
 8007a50:	08007a01 	.word	0x08007a01
 8007a54:	08007a01 	.word	0x08007a01
 8007a58:	08007bb3 	.word	0x08007bb3
 8007a5c:	08007a01 	.word	0x08007a01
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a01 	.word	0x08007a01
 8007a68:	08007a01 	.word	0x08007a01
 8007a6c:	08007b7b 	.word	0x08007b7b
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	1d1a      	adds	r2, r3, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	602a      	str	r2, [r5, #0]
 8007a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0a3      	b.n	8007bcc <_printf_i+0x1f4>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	6829      	ldr	r1, [r5, #0]
 8007a88:	0606      	lsls	r6, r0, #24
 8007a8a:	f101 0304 	add.w	r3, r1, #4
 8007a8e:	d50a      	bpl.n	8007aa6 <_printf_i+0xce>
 8007a90:	680e      	ldr	r6, [r1, #0]
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	da03      	bge.n	8007aa0 <_printf_i+0xc8>
 8007a98:	232d      	movs	r3, #45	; 0x2d
 8007a9a:	4276      	negs	r6, r6
 8007a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa0:	485e      	ldr	r0, [pc, #376]	; (8007c1c <_printf_i+0x244>)
 8007aa2:	230a      	movs	r3, #10
 8007aa4:	e019      	b.n	8007ada <_printf_i+0x102>
 8007aa6:	680e      	ldr	r6, [r1, #0]
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aae:	bf18      	it	ne
 8007ab0:	b236      	sxthne	r6, r6
 8007ab2:	e7ef      	b.n	8007a94 <_printf_i+0xbc>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	6029      	str	r1, [r5, #0]
 8007abc:	0601      	lsls	r1, r0, #24
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0xec>
 8007ac0:	681e      	ldr	r6, [r3, #0]
 8007ac2:	e002      	b.n	8007aca <_printf_i+0xf2>
 8007ac4:	0646      	lsls	r6, r0, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0xe8>
 8007ac8:	881e      	ldrh	r6, [r3, #0]
 8007aca:	4854      	ldr	r0, [pc, #336]	; (8007c1c <_printf_i+0x244>)
 8007acc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ace:	bf0c      	ite	eq
 8007ad0:	2308      	moveq	r3, #8
 8007ad2:	230a      	movne	r3, #10
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ada:	6865      	ldr	r5, [r4, #4]
 8007adc:	60a5      	str	r5, [r4, #8]
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	bfa2      	ittt	ge
 8007ae2:	6821      	ldrge	r1, [r4, #0]
 8007ae4:	f021 0104 	bicge.w	r1, r1, #4
 8007ae8:	6021      	strge	r1, [r4, #0]
 8007aea:	b90e      	cbnz	r6, 8007af0 <_printf_i+0x118>
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	d04d      	beq.n	8007b8c <_printf_i+0x1b4>
 8007af0:	4615      	mov	r5, r2
 8007af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007af6:	fb03 6711 	mls	r7, r3, r1, r6
 8007afa:	5dc7      	ldrb	r7, [r0, r7]
 8007afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b00:	4637      	mov	r7, r6
 8007b02:	42bb      	cmp	r3, r7
 8007b04:	460e      	mov	r6, r1
 8007b06:	d9f4      	bls.n	8007af2 <_printf_i+0x11a>
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d10b      	bne.n	8007b24 <_printf_i+0x14c>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	07de      	lsls	r6, r3, #31
 8007b10:	d508      	bpl.n	8007b24 <_printf_i+0x14c>
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	6861      	ldr	r1, [r4, #4]
 8007b16:	4299      	cmp	r1, r3
 8007b18:	bfde      	ittt	le
 8007b1a:	2330      	movle	r3, #48	; 0x30
 8007b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b24:	1b52      	subs	r2, r2, r5
 8007b26:	6122      	str	r2, [r4, #16]
 8007b28:	f8cd a000 	str.w	sl, [sp]
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	aa03      	add	r2, sp, #12
 8007b30:	4621      	mov	r1, r4
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7ff fee2 	bl	80078fc <_printf_common>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d14c      	bne.n	8007bd6 <_printf_i+0x1fe>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	b004      	add	sp, #16
 8007b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b46:	4835      	ldr	r0, [pc, #212]	; (8007c1c <_printf_i+0x244>)
 8007b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b4c:	6829      	ldr	r1, [r5, #0]
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b54:	6029      	str	r1, [r5, #0]
 8007b56:	061d      	lsls	r5, r3, #24
 8007b58:	d514      	bpl.n	8007b84 <_printf_i+0x1ac>
 8007b5a:	07df      	lsls	r7, r3, #31
 8007b5c:	bf44      	itt	mi
 8007b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b62:	6023      	strmi	r3, [r4, #0]
 8007b64:	b91e      	cbnz	r6, 8007b6e <_printf_i+0x196>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	f023 0320 	bic.w	r3, r3, #32
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	2310      	movs	r3, #16
 8007b70:	e7b0      	b.n	8007ad4 <_printf_i+0xfc>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	f043 0320 	orr.w	r3, r3, #32
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	2378      	movs	r3, #120	; 0x78
 8007b7c:	4828      	ldr	r0, [pc, #160]	; (8007c20 <_printf_i+0x248>)
 8007b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b82:	e7e3      	b.n	8007b4c <_printf_i+0x174>
 8007b84:	0659      	lsls	r1, r3, #25
 8007b86:	bf48      	it	mi
 8007b88:	b2b6      	uxthmi	r6, r6
 8007b8a:	e7e6      	b.n	8007b5a <_printf_i+0x182>
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	e7bb      	b.n	8007b08 <_printf_i+0x130>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	6826      	ldr	r6, [r4, #0]
 8007b94:	6961      	ldr	r1, [r4, #20]
 8007b96:	1d18      	adds	r0, r3, #4
 8007b98:	6028      	str	r0, [r5, #0]
 8007b9a:	0635      	lsls	r5, r6, #24
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	d501      	bpl.n	8007ba4 <_printf_i+0x1cc>
 8007ba0:	6019      	str	r1, [r3, #0]
 8007ba2:	e002      	b.n	8007baa <_printf_i+0x1d2>
 8007ba4:	0670      	lsls	r0, r6, #25
 8007ba6:	d5fb      	bpl.n	8007ba0 <_printf_i+0x1c8>
 8007ba8:	8019      	strh	r1, [r3, #0]
 8007baa:	2300      	movs	r3, #0
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	4615      	mov	r5, r2
 8007bb0:	e7ba      	b.n	8007b28 <_printf_i+0x150>
 8007bb2:	682b      	ldr	r3, [r5, #0]
 8007bb4:	1d1a      	adds	r2, r3, #4
 8007bb6:	602a      	str	r2, [r5, #0]
 8007bb8:	681d      	ldr	r5, [r3, #0]
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f7f8 fb0e 	bl	80001e0 <memchr>
 8007bc4:	b108      	cbz	r0, 8007bca <_printf_i+0x1f2>
 8007bc6:	1b40      	subs	r0, r0, r5
 8007bc8:	6060      	str	r0, [r4, #4]
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd4:	e7a8      	b.n	8007b28 <_printf_i+0x150>
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	462a      	mov	r2, r5
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4640      	mov	r0, r8
 8007bde:	47d0      	blx	sl
 8007be0:	3001      	adds	r0, #1
 8007be2:	d0ab      	beq.n	8007b3c <_printf_i+0x164>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	079b      	lsls	r3, r3, #30
 8007be8:	d413      	bmi.n	8007c12 <_printf_i+0x23a>
 8007bea:	68e0      	ldr	r0, [r4, #12]
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	4298      	cmp	r0, r3
 8007bf0:	bfb8      	it	lt
 8007bf2:	4618      	movlt	r0, r3
 8007bf4:	e7a4      	b.n	8007b40 <_printf_i+0x168>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4640      	mov	r0, r8
 8007bfe:	47d0      	blx	sl
 8007c00:	3001      	adds	r0, #1
 8007c02:	d09b      	beq.n	8007b3c <_printf_i+0x164>
 8007c04:	3501      	adds	r5, #1
 8007c06:	68e3      	ldr	r3, [r4, #12]
 8007c08:	9903      	ldr	r1, [sp, #12]
 8007c0a:	1a5b      	subs	r3, r3, r1
 8007c0c:	42ab      	cmp	r3, r5
 8007c0e:	dcf2      	bgt.n	8007bf6 <_printf_i+0x21e>
 8007c10:	e7eb      	b.n	8007bea <_printf_i+0x212>
 8007c12:	2500      	movs	r5, #0
 8007c14:	f104 0619 	add.w	r6, r4, #25
 8007c18:	e7f5      	b.n	8007c06 <_printf_i+0x22e>
 8007c1a:	bf00      	nop
 8007c1c:	0800830d 	.word	0x0800830d
 8007c20:	0800831e 	.word	0x0800831e

08007c24 <_sbrk_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d06      	ldr	r5, [pc, #24]	; (8007c40 <_sbrk_r+0x1c>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	f7f8 ff0c 	bl	8000a4c <_sbrk>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_sbrk_r+0x1a>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_sbrk_r+0x1a>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20001e20 	.word	0x20001e20

08007c44 <__sread>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	460c      	mov	r4, r1
 8007c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4c:	f000 fab2 	bl	80081b4 <_read_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	bfab      	itete	ge
 8007c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c56:	89a3      	ldrhlt	r3, [r4, #12]
 8007c58:	181b      	addge	r3, r3, r0
 8007c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c5e:	bfac      	ite	ge
 8007c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c62:	81a3      	strhlt	r3, [r4, #12]
 8007c64:	bd10      	pop	{r4, pc}

08007c66 <__swrite>:
 8007c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6a:	461f      	mov	r7, r3
 8007c6c:	898b      	ldrh	r3, [r1, #12]
 8007c6e:	05db      	lsls	r3, r3, #23
 8007c70:	4605      	mov	r5, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	4616      	mov	r6, r2
 8007c76:	d505      	bpl.n	8007c84 <__swrite+0x1e>
 8007c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f000 f9c8 	bl	8008014 <_lseek_r>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	4628      	mov	r0, r5
 8007c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	f000 b869 	b.w	8007d70 <_write_r>

08007c9e <__sseek>:
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca6:	f000 f9b5 	bl	8008014 <_lseek_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	bf15      	itete	ne
 8007cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cba:	81a3      	strheq	r3, [r4, #12]
 8007cbc:	bf18      	it	ne
 8007cbe:	81a3      	strhne	r3, [r4, #12]
 8007cc0:	bd10      	pop	{r4, pc}

08007cc2 <__sclose>:
 8007cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc6:	f000 b8d3 	b.w	8007e70 <_close_r>
	...

08007ccc <__swbuf_r>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	460e      	mov	r6, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	b118      	cbz	r0, 8007cde <__swbuf_r+0x12>
 8007cd6:	6983      	ldr	r3, [r0, #24]
 8007cd8:	b90b      	cbnz	r3, 8007cde <__swbuf_r+0x12>
 8007cda:	f7ff fb81 	bl	80073e0 <__sinit>
 8007cde:	4b21      	ldr	r3, [pc, #132]	; (8007d64 <__swbuf_r+0x98>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	d12b      	bne.n	8007d3c <__swbuf_r+0x70>
 8007ce4:	686c      	ldr	r4, [r5, #4]
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	071a      	lsls	r2, r3, #28
 8007cee:	d52f      	bpl.n	8007d50 <__swbuf_r+0x84>
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	b36b      	cbz	r3, 8007d50 <__swbuf_r+0x84>
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	1ac0      	subs	r0, r0, r3
 8007cfa:	6963      	ldr	r3, [r4, #20]
 8007cfc:	b2f6      	uxtb	r6, r6
 8007cfe:	4283      	cmp	r3, r0
 8007d00:	4637      	mov	r7, r6
 8007d02:	dc04      	bgt.n	8007d0e <__swbuf_r+0x42>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 f948 	bl	8007f9c <_fflush_r>
 8007d0c:	bb30      	cbnz	r0, 8007d5c <__swbuf_r+0x90>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	60a3      	str	r3, [r4, #8]
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	701e      	strb	r6, [r3, #0]
 8007d1c:	6963      	ldr	r3, [r4, #20]
 8007d1e:	3001      	adds	r0, #1
 8007d20:	4283      	cmp	r3, r0
 8007d22:	d004      	beq.n	8007d2e <__swbuf_r+0x62>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	07db      	lsls	r3, r3, #31
 8007d28:	d506      	bpl.n	8007d38 <__swbuf_r+0x6c>
 8007d2a:	2e0a      	cmp	r6, #10
 8007d2c:	d104      	bne.n	8007d38 <__swbuf_r+0x6c>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f933 	bl	8007f9c <_fflush_r>
 8007d36:	b988      	cbnz	r0, 8007d5c <__swbuf_r+0x90>
 8007d38:	4638      	mov	r0, r7
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <__swbuf_r+0x9c>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <__swbuf_r+0x7a>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7cf      	b.n	8007ce6 <__swbuf_r+0x1a>
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <__swbuf_r+0xa0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	bf08      	it	eq
 8007d4c:	68ec      	ldreq	r4, [r5, #12]
 8007d4e:	e7ca      	b.n	8007ce6 <__swbuf_r+0x1a>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f81e 	bl	8007d94 <__swsetup_r>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d0cb      	beq.n	8007cf4 <__swbuf_r+0x28>
 8007d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d60:	e7ea      	b.n	8007d38 <__swbuf_r+0x6c>
 8007d62:	bf00      	nop
 8007d64:	080082bc 	.word	0x080082bc
 8007d68:	080082dc 	.word	0x080082dc
 8007d6c:	0800829c 	.word	0x0800829c

08007d70 <_write_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	; (8007d90 <_write_r+0x20>)
 8007d74:	4604      	mov	r4, r0
 8007d76:	4608      	mov	r0, r1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	602a      	str	r2, [r5, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f7f8 fe13 	bl	80009aa <_write>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_write_r+0x1e>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_write_r+0x1e>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	20001e20 	.word	0x20001e20

08007d94 <__swsetup_r>:
 8007d94:	4b32      	ldr	r3, [pc, #200]	; (8007e60 <__swsetup_r+0xcc>)
 8007d96:	b570      	push	{r4, r5, r6, lr}
 8007d98:	681d      	ldr	r5, [r3, #0]
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	b125      	cbz	r5, 8007daa <__swsetup_r+0x16>
 8007da0:	69ab      	ldr	r3, [r5, #24]
 8007da2:	b913      	cbnz	r3, 8007daa <__swsetup_r+0x16>
 8007da4:	4628      	mov	r0, r5
 8007da6:	f7ff fb1b 	bl	80073e0 <__sinit>
 8007daa:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <__swsetup_r+0xd0>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d10f      	bne.n	8007dd0 <__swsetup_r+0x3c>
 8007db0:	686c      	ldr	r4, [r5, #4]
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007db8:	0719      	lsls	r1, r3, #28
 8007dba:	d42c      	bmi.n	8007e16 <__swsetup_r+0x82>
 8007dbc:	06dd      	lsls	r5, r3, #27
 8007dbe:	d411      	bmi.n	8007de4 <__swsetup_r+0x50>
 8007dc0:	2309      	movs	r3, #9
 8007dc2:	6033      	str	r3, [r6, #0]
 8007dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	e03e      	b.n	8007e4e <__swsetup_r+0xba>
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <__swsetup_r+0xd4>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d101      	bne.n	8007dda <__swsetup_r+0x46>
 8007dd6:	68ac      	ldr	r4, [r5, #8]
 8007dd8:	e7eb      	b.n	8007db2 <__swsetup_r+0x1e>
 8007dda:	4b24      	ldr	r3, [pc, #144]	; (8007e6c <__swsetup_r+0xd8>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	bf08      	it	eq
 8007de0:	68ec      	ldreq	r4, [r5, #12]
 8007de2:	e7e6      	b.n	8007db2 <__swsetup_r+0x1e>
 8007de4:	0758      	lsls	r0, r3, #29
 8007de6:	d512      	bpl.n	8007e0e <__swsetup_r+0x7a>
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	b141      	cbz	r1, 8007dfe <__swsetup_r+0x6a>
 8007dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df0:	4299      	cmp	r1, r3
 8007df2:	d002      	beq.n	8007dfa <__swsetup_r+0x66>
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 f991 	bl	800811c <_free_r>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f043 0308 	orr.w	r3, r3, #8
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	b94b      	cbnz	r3, 8007e2e <__swsetup_r+0x9a>
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d003      	beq.n	8007e2e <__swsetup_r+0x9a>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 f92b 	bl	8008084 <__smakebuf_r>
 8007e2e:	89a0      	ldrh	r0, [r4, #12]
 8007e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e34:	f010 0301 	ands.w	r3, r0, #1
 8007e38:	d00a      	beq.n	8007e50 <__swsetup_r+0xbc>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60a3      	str	r3, [r4, #8]
 8007e3e:	6963      	ldr	r3, [r4, #20]
 8007e40:	425b      	negs	r3, r3
 8007e42:	61a3      	str	r3, [r4, #24]
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	b943      	cbnz	r3, 8007e5a <__swsetup_r+0xc6>
 8007e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e4c:	d1ba      	bne.n	8007dc4 <__swsetup_r+0x30>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	0781      	lsls	r1, r0, #30
 8007e52:	bf58      	it	pl
 8007e54:	6963      	ldrpl	r3, [r4, #20]
 8007e56:	60a3      	str	r3, [r4, #8]
 8007e58:	e7f4      	b.n	8007e44 <__swsetup_r+0xb0>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e7f7      	b.n	8007e4e <__swsetup_r+0xba>
 8007e5e:	bf00      	nop
 8007e60:	200000fc 	.word	0x200000fc
 8007e64:	080082bc 	.word	0x080082bc
 8007e68:	080082dc 	.word	0x080082dc
 8007e6c:	0800829c 	.word	0x0800829c

08007e70 <_close_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4d06      	ldr	r5, [pc, #24]	; (8007e8c <_close_r+0x1c>)
 8007e74:	2300      	movs	r3, #0
 8007e76:	4604      	mov	r4, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	602b      	str	r3, [r5, #0]
 8007e7c:	f7f8 fdb1 	bl	80009e2 <_close>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_close_r+0x1a>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_close_r+0x1a>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20001e20 	.word	0x20001e20

08007e90 <__sflush_r>:
 8007e90:	898a      	ldrh	r2, [r1, #12]
 8007e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	0710      	lsls	r0, r2, #28
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	d458      	bmi.n	8007f50 <__sflush_r+0xc0>
 8007e9e:	684b      	ldr	r3, [r1, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc05      	bgt.n	8007eb0 <__sflush_r+0x20>
 8007ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dc02      	bgt.n	8007eb0 <__sflush_r+0x20>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	d0f9      	beq.n	8007eaa <__sflush_r+0x1a>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ebc:	682f      	ldr	r7, [r5, #0]
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	d032      	beq.n	8007f28 <__sflush_r+0x98>
 8007ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	075a      	lsls	r2, r3, #29
 8007ec8:	d505      	bpl.n	8007ed6 <__sflush_r+0x46>
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	1ac0      	subs	r0, r0, r3
 8007ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ed0:	b10b      	cbz	r3, 8007ed6 <__sflush_r+0x46>
 8007ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ed4:	1ac0      	subs	r0, r0, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4602      	mov	r2, r0
 8007eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007edc:	6a21      	ldr	r1, [r4, #32]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	d106      	bne.n	8007ef6 <__sflush_r+0x66>
 8007ee8:	6829      	ldr	r1, [r5, #0]
 8007eea:	291d      	cmp	r1, #29
 8007eec:	d82c      	bhi.n	8007f48 <__sflush_r+0xb8>
 8007eee:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <__sflush_r+0x108>)
 8007ef0:	40ca      	lsrs	r2, r1
 8007ef2:	07d6      	lsls	r6, r2, #31
 8007ef4:	d528      	bpl.n	8007f48 <__sflush_r+0xb8>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6062      	str	r2, [r4, #4]
 8007efa:	04d9      	lsls	r1, r3, #19
 8007efc:	6922      	ldr	r2, [r4, #16]
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	d504      	bpl.n	8007f0c <__sflush_r+0x7c>
 8007f02:	1c42      	adds	r2, r0, #1
 8007f04:	d101      	bne.n	8007f0a <__sflush_r+0x7a>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	b903      	cbnz	r3, 8007f0c <__sflush_r+0x7c>
 8007f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	2900      	cmp	r1, #0
 8007f12:	d0ca      	beq.n	8007eaa <__sflush_r+0x1a>
 8007f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <__sflush_r+0x92>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 f8fd 	bl	800811c <_free_r>
 8007f22:	2000      	movs	r0, #0
 8007f24:	6360      	str	r0, [r4, #52]	; 0x34
 8007f26:	e7c1      	b.n	8007eac <__sflush_r+0x1c>
 8007f28:	6a21      	ldr	r1, [r4, #32]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b0      	blx	r6
 8007f30:	1c41      	adds	r1, r0, #1
 8007f32:	d1c7      	bne.n	8007ec4 <__sflush_r+0x34>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0c4      	beq.n	8007ec4 <__sflush_r+0x34>
 8007f3a:	2b1d      	cmp	r3, #29
 8007f3c:	d001      	beq.n	8007f42 <__sflush_r+0xb2>
 8007f3e:	2b16      	cmp	r3, #22
 8007f40:	d101      	bne.n	8007f46 <__sflush_r+0xb6>
 8007f42:	602f      	str	r7, [r5, #0]
 8007f44:	e7b1      	b.n	8007eaa <__sflush_r+0x1a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	e7ad      	b.n	8007eac <__sflush_r+0x1c>
 8007f50:	690f      	ldr	r7, [r1, #16]
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d0a9      	beq.n	8007eaa <__sflush_r+0x1a>
 8007f56:	0793      	lsls	r3, r2, #30
 8007f58:	680e      	ldr	r6, [r1, #0]
 8007f5a:	bf08      	it	eq
 8007f5c:	694b      	ldreq	r3, [r1, #20]
 8007f5e:	600f      	str	r7, [r1, #0]
 8007f60:	bf18      	it	ne
 8007f62:	2300      	movne	r3, #0
 8007f64:	eba6 0807 	sub.w	r8, r6, r7
 8007f68:	608b      	str	r3, [r1, #8]
 8007f6a:	f1b8 0f00 	cmp.w	r8, #0
 8007f6e:	dd9c      	ble.n	8007eaa <__sflush_r+0x1a>
 8007f70:	6a21      	ldr	r1, [r4, #32]
 8007f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f74:	4643      	mov	r3, r8
 8007f76:	463a      	mov	r2, r7
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b0      	blx	r6
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dc06      	bgt.n	8007f8e <__sflush_r+0xfe>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e78e      	b.n	8007eac <__sflush_r+0x1c>
 8007f8e:	4407      	add	r7, r0
 8007f90:	eba8 0800 	sub.w	r8, r8, r0
 8007f94:	e7e9      	b.n	8007f6a <__sflush_r+0xda>
 8007f96:	bf00      	nop
 8007f98:	20400001 	.word	0x20400001

08007f9c <_fflush_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	690b      	ldr	r3, [r1, #16]
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b913      	cbnz	r3, 8007fac <_fflush_r+0x10>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	4628      	mov	r0, r5
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	b118      	cbz	r0, 8007fb6 <_fflush_r+0x1a>
 8007fae:	6983      	ldr	r3, [r0, #24]
 8007fb0:	b90b      	cbnz	r3, 8007fb6 <_fflush_r+0x1a>
 8007fb2:	f7ff fa15 	bl	80073e0 <__sinit>
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <_fflush_r+0x6c>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d11b      	bne.n	8007ff4 <_fflush_r+0x58>
 8007fbc:	686c      	ldr	r4, [r5, #4]
 8007fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0ef      	beq.n	8007fa6 <_fflush_r+0xa>
 8007fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fc8:	07d0      	lsls	r0, r2, #31
 8007fca:	d404      	bmi.n	8007fd6 <_fflush_r+0x3a>
 8007fcc:	0599      	lsls	r1, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_fflush_r+0x3a>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd2:	f7ff faa3 	bl	800751c <__retarget_lock_acquire_recursive>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	4621      	mov	r1, r4
 8007fda:	f7ff ff59 	bl	8007e90 <__sflush_r>
 8007fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe0:	07da      	lsls	r2, r3, #31
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	d4e0      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	059b      	lsls	r3, r3, #22
 8007fea:	d4dd      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fee:	f7ff fa96 	bl	800751e <__retarget_lock_release_recursive>
 8007ff2:	e7d9      	b.n	8007fa8 <_fflush_r+0xc>
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <_fflush_r+0x70>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d101      	bne.n	8007ffe <_fflush_r+0x62>
 8007ffa:	68ac      	ldr	r4, [r5, #8]
 8007ffc:	e7df      	b.n	8007fbe <_fflush_r+0x22>
 8007ffe:	4b04      	ldr	r3, [pc, #16]	; (8008010 <_fflush_r+0x74>)
 8008000:	429c      	cmp	r4, r3
 8008002:	bf08      	it	eq
 8008004:	68ec      	ldreq	r4, [r5, #12]
 8008006:	e7da      	b.n	8007fbe <_fflush_r+0x22>
 8008008:	080082bc 	.word	0x080082bc
 800800c:	080082dc 	.word	0x080082dc
 8008010:	0800829c 	.word	0x0800829c

08008014 <_lseek_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d07      	ldr	r5, [pc, #28]	; (8008034 <_lseek_r+0x20>)
 8008018:	4604      	mov	r4, r0
 800801a:	4608      	mov	r0, r1
 800801c:	4611      	mov	r1, r2
 800801e:	2200      	movs	r2, #0
 8008020:	602a      	str	r2, [r5, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f7f8 fd04 	bl	8000a30 <_lseek>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_lseek_r+0x1e>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_lseek_r+0x1e>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	20001e20 	.word	0x20001e20

08008038 <__swhatbuf_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	2900      	cmp	r1, #0
 8008042:	b096      	sub	sp, #88	; 0x58
 8008044:	4614      	mov	r4, r2
 8008046:	461d      	mov	r5, r3
 8008048:	da08      	bge.n	800805c <__swhatbuf_r+0x24>
 800804a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	061a      	lsls	r2, r3, #24
 8008054:	d410      	bmi.n	8008078 <__swhatbuf_r+0x40>
 8008056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805a:	e00e      	b.n	800807a <__swhatbuf_r+0x42>
 800805c:	466a      	mov	r2, sp
 800805e:	f000 f8bb 	bl	80081d8 <_fstat_r>
 8008062:	2800      	cmp	r0, #0
 8008064:	dbf1      	blt.n	800804a <__swhatbuf_r+0x12>
 8008066:	9a01      	ldr	r2, [sp, #4]
 8008068:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800806c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008070:	425a      	negs	r2, r3
 8008072:	415a      	adcs	r2, r3
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	e7ee      	b.n	8008056 <__swhatbuf_r+0x1e>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	2000      	movs	r0, #0
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	b016      	add	sp, #88	; 0x58
 8008080:	bd70      	pop	{r4, r5, r6, pc}
	...

08008084 <__smakebuf_r>:
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008088:	079d      	lsls	r5, r3, #30
 800808a:	4606      	mov	r6, r0
 800808c:	460c      	mov	r4, r1
 800808e:	d507      	bpl.n	80080a0 <__smakebuf_r+0x1c>
 8008090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	2301      	movs	r3, #1
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	b002      	add	sp, #8
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	ab01      	add	r3, sp, #4
 80080a2:	466a      	mov	r2, sp
 80080a4:	f7ff ffc8 	bl	8008038 <__swhatbuf_r>
 80080a8:	9900      	ldr	r1, [sp, #0]
 80080aa:	4605      	mov	r5, r0
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff fa57 	bl	8007560 <_malloc_r>
 80080b2:	b948      	cbnz	r0, 80080c8 <__smakebuf_r+0x44>
 80080b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b8:	059a      	lsls	r2, r3, #22
 80080ba:	d4ef      	bmi.n	800809c <__smakebuf_r+0x18>
 80080bc:	f023 0303 	bic.w	r3, r3, #3
 80080c0:	f043 0302 	orr.w	r3, r3, #2
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	e7e3      	b.n	8008090 <__smakebuf_r+0xc>
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <__smakebuf_r+0x7c>)
 80080ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	6163      	str	r3, [r4, #20]
 80080da:	9b01      	ldr	r3, [sp, #4]
 80080dc:	6120      	str	r0, [r4, #16]
 80080de:	b15b      	cbz	r3, 80080f8 <__smakebuf_r+0x74>
 80080e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 f889 	bl	80081fc <_isatty_r>
 80080ea:	b128      	cbz	r0, 80080f8 <__smakebuf_r+0x74>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	89a0      	ldrh	r0, [r4, #12]
 80080fa:	4305      	orrs	r5, r0
 80080fc:	81a5      	strh	r5, [r4, #12]
 80080fe:	e7cd      	b.n	800809c <__smakebuf_r+0x18>
 8008100:	08007379 	.word	0x08007379

08008104 <__malloc_lock>:
 8008104:	4801      	ldr	r0, [pc, #4]	; (800810c <__malloc_lock+0x8>)
 8008106:	f7ff ba09 	b.w	800751c <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	20001e14 	.word	0x20001e14

08008110 <__malloc_unlock>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__malloc_unlock+0x8>)
 8008112:	f7ff ba04 	b.w	800751e <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	20001e14 	.word	0x20001e14

0800811c <_free_r>:
 800811c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800811e:	2900      	cmp	r1, #0
 8008120:	d044      	beq.n	80081ac <_free_r+0x90>
 8008122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008126:	9001      	str	r0, [sp, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f1a1 0404 	sub.w	r4, r1, #4
 800812e:	bfb8      	it	lt
 8008130:	18e4      	addlt	r4, r4, r3
 8008132:	f7ff ffe7 	bl	8008104 <__malloc_lock>
 8008136:	4a1e      	ldr	r2, [pc, #120]	; (80081b0 <_free_r+0x94>)
 8008138:	9801      	ldr	r0, [sp, #4]
 800813a:	6813      	ldr	r3, [r2, #0]
 800813c:	b933      	cbnz	r3, 800814c <_free_r+0x30>
 800813e:	6063      	str	r3, [r4, #4]
 8008140:	6014      	str	r4, [r2, #0]
 8008142:	b003      	add	sp, #12
 8008144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008148:	f7ff bfe2 	b.w	8008110 <__malloc_unlock>
 800814c:	42a3      	cmp	r3, r4
 800814e:	d908      	bls.n	8008162 <_free_r+0x46>
 8008150:	6825      	ldr	r5, [r4, #0]
 8008152:	1961      	adds	r1, r4, r5
 8008154:	428b      	cmp	r3, r1
 8008156:	bf01      	itttt	eq
 8008158:	6819      	ldreq	r1, [r3, #0]
 800815a:	685b      	ldreq	r3, [r3, #4]
 800815c:	1949      	addeq	r1, r1, r5
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	e7ed      	b.n	800813e <_free_r+0x22>
 8008162:	461a      	mov	r2, r3
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	b10b      	cbz	r3, 800816c <_free_r+0x50>
 8008168:	42a3      	cmp	r3, r4
 800816a:	d9fa      	bls.n	8008162 <_free_r+0x46>
 800816c:	6811      	ldr	r1, [r2, #0]
 800816e:	1855      	adds	r5, r2, r1
 8008170:	42a5      	cmp	r5, r4
 8008172:	d10b      	bne.n	800818c <_free_r+0x70>
 8008174:	6824      	ldr	r4, [r4, #0]
 8008176:	4421      	add	r1, r4
 8008178:	1854      	adds	r4, r2, r1
 800817a:	42a3      	cmp	r3, r4
 800817c:	6011      	str	r1, [r2, #0]
 800817e:	d1e0      	bne.n	8008142 <_free_r+0x26>
 8008180:	681c      	ldr	r4, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	6053      	str	r3, [r2, #4]
 8008186:	4421      	add	r1, r4
 8008188:	6011      	str	r1, [r2, #0]
 800818a:	e7da      	b.n	8008142 <_free_r+0x26>
 800818c:	d902      	bls.n	8008194 <_free_r+0x78>
 800818e:	230c      	movs	r3, #12
 8008190:	6003      	str	r3, [r0, #0]
 8008192:	e7d6      	b.n	8008142 <_free_r+0x26>
 8008194:	6825      	ldr	r5, [r4, #0]
 8008196:	1961      	adds	r1, r4, r5
 8008198:	428b      	cmp	r3, r1
 800819a:	bf04      	itt	eq
 800819c:	6819      	ldreq	r1, [r3, #0]
 800819e:	685b      	ldreq	r3, [r3, #4]
 80081a0:	6063      	str	r3, [r4, #4]
 80081a2:	bf04      	itt	eq
 80081a4:	1949      	addeq	r1, r1, r5
 80081a6:	6021      	streq	r1, [r4, #0]
 80081a8:	6054      	str	r4, [r2, #4]
 80081aa:	e7ca      	b.n	8008142 <_free_r+0x26>
 80081ac:	b003      	add	sp, #12
 80081ae:	bd30      	pop	{r4, r5, pc}
 80081b0:	20001e18 	.word	0x20001e18

080081b4 <_read_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_read_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7f8 fbd4 	bl	8000970 <_read>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_read_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_read_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20001e20 	.word	0x20001e20

080081d8 <_fstat_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	; (80081f8 <_fstat_r+0x20>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f7f8 fc08 	bl	80009fa <_fstat>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d102      	bne.n	80081f4 <_fstat_r+0x1c>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	b103      	cbz	r3, 80081f4 <_fstat_r+0x1c>
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	bf00      	nop
 80081f8:	20001e20 	.word	0x20001e20

080081fc <_isatty_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d06      	ldr	r5, [pc, #24]	; (8008218 <_isatty_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7f8 fc07 	bl	8000a1a <_isatty>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_isatty_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_isatty_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	20001e20 	.word	0x20001e20

0800821c <_init>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr

08008228 <_fini>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	bf00      	nop
 800822c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822e:	bc08      	pop	{r3}
 8008230:	469e      	mov	lr, r3
 8008232:	4770      	bx	lr
